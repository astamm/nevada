// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dist_hamming_impl
double dist_hamming_impl(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _nevada_dist_hamming_impl(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dist_hamming_impl(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dist_frobenius_impl
double dist_frobenius_impl(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _nevada_dist_frobenius_impl(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dist_frobenius_impl(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dist_spectral_impl
double dist_spectral_impl(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _nevada_dist_spectral_impl(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dist_spectral_impl(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dist_root_euclidean_impl
double dist_root_euclidean_impl(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _nevada_dist_root_euclidean_impl(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dist_root_euclidean_impl(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dist_nvd_impl
Rcpp::NumericVector dist_nvd_impl(const Rcpp::List& z, const std::string distance);
RcppExport SEXP _nevada_dist_nvd_impl(SEXP zSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const std::string >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_nvd_impl(z, distance));
    return rcpp_result_gen;
END_RCPP
}
// ipro_frobenius_impl
double ipro_frobenius_impl(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _nevada_ipro_frobenius_impl(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ipro_frobenius_impl(x, y));
    return rcpp_result_gen;
END_RCPP
}
// est_nbdsmooth
arma::mat est_nbdsmooth(const arma::mat& A);
RcppExport SEXP _nevada_est_nbdsmooth(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(est_nbdsmooth(A));
    return rcpp_result_gen;
END_RCPP
}
// mean_nvd_impl
arma::mat mean_nvd_impl(const Rcpp::List& z, const arma::vec& weights);
RcppExport SEXP _nevada_mean_nvd_impl(SEXP zSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_nvd_impl(z, weights));
    return rcpp_result_gen;
END_RCPP
}
// var_nvd_impl
double var_nvd_impl(const Rcpp::List& z, const std::string distance);
RcppExport SEXP _nevada_var_nvd_impl(SEXP zSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const std::string >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(var_nvd_impl(z, distance));
    return rcpp_result_gen;
END_RCPP
}
// repr_adjacency_impl
arma::mat repr_adjacency_impl(const unsigned int numberOfVertices, const arma::mat& edgeList, const arma::vec& weights);
RcppExport SEXP _nevada_repr_adjacency_impl(SEXP numberOfVerticesSEXP, SEXP edgeListSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type numberOfVertices(numberOfVerticesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgeList(edgeListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(repr_adjacency_impl(numberOfVertices, edgeList, weights));
    return rcpp_result_gen;
END_RCPP
}
// stat_t_euclidean_impl
double stat_t_euclidean_impl(const Rcpp::List& x, const Rcpp::List& y, const bool pooled);
RcppExport SEXP _nevada_stat_t_euclidean_impl(SEXP xSEXP, SEXP ySEXP, SEXP pooledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool >::type pooled(pooledSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_t_euclidean_impl(x, y, pooled));
    return rcpp_result_gen;
END_RCPP
}
// stat_edge_count_impl
arma::vec stat_edge_count_impl(const arma::mat& E, const arma::vec& indices);
RcppExport SEXP _nevada_stat_edge_count_impl(SEXP ESEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_edge_count_impl(E, indices));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nevada_dist_hamming_impl", (DL_FUNC) &_nevada_dist_hamming_impl, 2},
    {"_nevada_dist_frobenius_impl", (DL_FUNC) &_nevada_dist_frobenius_impl, 2},
    {"_nevada_dist_spectral_impl", (DL_FUNC) &_nevada_dist_spectral_impl, 2},
    {"_nevada_dist_root_euclidean_impl", (DL_FUNC) &_nevada_dist_root_euclidean_impl, 2},
    {"_nevada_dist_nvd_impl", (DL_FUNC) &_nevada_dist_nvd_impl, 2},
    {"_nevada_ipro_frobenius_impl", (DL_FUNC) &_nevada_ipro_frobenius_impl, 2},
    {"_nevada_est_nbdsmooth", (DL_FUNC) &_nevada_est_nbdsmooth, 1},
    {"_nevada_mean_nvd_impl", (DL_FUNC) &_nevada_mean_nvd_impl, 2},
    {"_nevada_var_nvd_impl", (DL_FUNC) &_nevada_var_nvd_impl, 2},
    {"_nevada_repr_adjacency_impl", (DL_FUNC) &_nevada_repr_adjacency_impl, 3},
    {"_nevada_stat_t_euclidean_impl", (DL_FUNC) &_nevada_stat_t_euclidean_impl, 3},
    {"_nevada_stat_edge_count_impl", (DL_FUNC) &_nevada_stat_edge_count_impl, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_nevada(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
