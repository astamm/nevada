[{"path":"https://astamm.github.io/nevada/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://astamm.github.io/nevada/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"the-nvd-class-for-network-valued-data","dir":"Articles","previous_headings":"","what":"The nvd class for network-valued data","title":"Network-Valued Data Analysis","text":"nevada, network-valued data stored object class nvd, basically list igraph objects. provide: constructor nvd() allows user simulate samples networks using popular models igraph. Currently, one can use: stochastic block model, \\(k\\)-regular model, GNP model, small-world model, PA model, Poisson model, binomial model. constructor simulates networks 25 nodes. function as_nvd() coerce lists igraph objects object class nvd.","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"network-representation","dir":"Articles","previous_headings":"","what":"Network representation","title":"Network-Valued Data Analysis","text":"currently 3 possible matrix representations network. Let \\(G\\) network \\(N\\) nodes.","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"adjacency-matrix","dir":"Articles","previous_headings":"Network representation","what":"Adjacency matrix","title":"Network-Valued Data Analysis","text":"\\(N\\) x \\(N\\) matrix \\(W\\) adjacency matrix \\(G\\) element \\(W_{ij}\\) indicates edge vertex \\(\\) vertex \\(j\\): \\[ W_{ij}= \\begin{cases} w_{,j}, & \\mbox{} (,j) \\E \\mbox{ weight } w_{,j}\\\\ 0, & \\mbox{otherwise.} \\end{cases} \\] nevada, representation can achieved repr_adjacency().","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"laplacian-matrix","dir":"Articles","previous_headings":"Network representation","what":"Laplacian matrix","title":"Network-Valued Data Analysis","text":"Laplacian matrix \\(L\\) network \\(G\\) defined following way: \\[ L = D(W) - W, \\] \\(D(W)\\) diagonal matrix whose \\(\\)-th diagonal element degree vertex \\(\\). nevada, representation can achieved repr_laplacian().","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"modularity-matrix","dir":"Articles","previous_headings":"Network representation","what":"Modularity matrix","title":"Network-Valued Data Analysis","text":"elements modularity matrix \\(B\\) given \\[ B_{ij} = W_{ij} - \\frac{d_i d_j}{2m}, \\] \\(d_i\\) \\(d_j\\) degrees vertices \\(\\) \\(j\\) respectively, \\(m\\) total number edges network. nevada, representation can achieved repr_modularity().","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"choosing-a-representation-for-an-object-of-class-nvd","dir":"Articles","previous_headings":"Network representation","what":"Choosing a representation for an object of class nvd","title":"Network-Valued Data Analysis","text":"Instead going every single network sample make representation, nevada provides repr_nvd() function exactly object class nvd.","code":"x <- nvd(model = \"gnp\", n = 3, model_params = list(p = 1/3)) repr_nvd(x, representation = \"laplacian\") #> [[1]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]   13    0    0    0   -1   -1   -1   -1   -1    -1    -1     0     0 #>  [2,]    0    6    0    0   -1    0    0    0    0     0     0    -1     0 #>  [3,]    0    0    3    0   -1    0    0    0    0     0     0     0     0 #>  [4,]    0    0    0    7    0    0    0   -1    0    -1     0     0     0 #>  [5,]   -1   -1   -1    0   13    0   -1    0    0     0    -1     0    -1 #>  [6,]   -1    0    0    0    0    6    0   -1    0     0    -1    -1     0 #>  [7,]   -1    0    0    0   -1    0    8    0    0     0    -1     0     0 #>  [8,]   -1    0    0   -1    0   -1    0   10   -1     0    -1     0     0 #>  [9,]   -1    0    0    0    0    0    0   -1    7     0     0     0     0 #> [10,]   -1    0    0   -1    0    0    0    0    0     9    -1    -1     0 #> [11,]   -1    0    0    0   -1   -1   -1   -1    0    -1     9     0     0 #> [12,]    0   -1    0    0    0   -1    0    0    0    -1     0     7     0 #> [13,]    0    0    0    0   -1    0    0    0    0     0     0     0     3 #> [14,]   -1   -1   -1   -1   -1    0    0    0   -1     0     0    -1    -1 #> [15,]   -1   -1    0   -1   -1    0    0    0   -1    -1     0     0    -1 #> [16,]   -1    0    0   -1    0    0    0    0    0     0     0    -1     0 #> [17,]    0    0    0    0    0    0   -1    0    0     0    -1     0     0 #> [18,]    0    0    0    0    0    0    0   -1   -1    -1     0     0     0 #> [19,]    0    0    0    0    0   -1    0    0    0    -1    -1     0     0 #> [20,]   -1    0    0   -1   -1    0   -1    0    0     0     0     0     0 #> [21,]    0    0    0   -1    0   -1   -1   -1    0     0     0    -1     0 #> [22,]    0   -1    0    0   -1    0    0   -1   -1     0    -1    -1     0 #> [23,]   -1    0    0    0   -1    0   -1   -1    0    -1     0     0     0 #> [24,]    0    0    0    0   -1    0   -1   -1   -1    -1     0     0     0 #> [25,]   -1   -1   -1    0   -1    0    0    0    0     0     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]    -1    -1    -1     0     0     0    -1     0     0    -1     0    -1 #>  [2,]    -1    -1     0     0     0     0     0     0    -1     0     0    -1 #>  [3,]    -1     0     0     0     0     0     0     0     0     0     0    -1 #>  [4,]    -1    -1    -1     0     0     0    -1    -1     0     0     0     0 #>  [5,]    -1    -1     0     0     0     0    -1     0    -1    -1    -1    -1 #>  [6,]     0     0     0     0     0    -1     0    -1     0     0     0     0 #>  [7,]     0     0     0    -1     0     0    -1    -1     0    -1    -1     0 #>  [8,]     0     0     0     0    -1     0     0    -1    -1    -1    -1     0 #>  [9,]    -1    -1     0     0    -1     0     0     0    -1     0    -1     0 #> [10,]     0    -1     0     0    -1    -1     0     0     0    -1    -1     0 #> [11,]     0     0     0    -1     0    -1     0     0    -1     0     0     0 #> [12,]    -1     0    -1     0     0     0     0    -1    -1     0     0     0 #> [13,]    -1    -1     0     0     0     0     0     0     0     0     0     0 #> [14,]    12     0     0     0     0     0    -1     0    -1    -1     0    -1 #> [15,]     0    10     0     0     0    -1     0     0    -1    -1     0     0 #> [16,]     0     0     6     0    -1     0    -1    -1     0     0     0     0 #> [17,]     0     0     0     5    -1     0     0     0    -1    -1     0     0 #> [18,]     0     0    -1    -1     8    -1    -1     0     0     0     0    -1 #> [19,]     0    -1     0     0    -1     7    -1     0    -1     0     0     0 #> [20,]    -1     0    -1     0    -1    -1     9     0    -1     0     0     0 #> [21,]     0     0    -1     0     0     0     0     7     0    -1     0     0 #> [22,]    -1    -1     0    -1     0    -1    -1     0    11     0     0     0 #> [23,]    -1    -1     0    -1     0     0     0    -1     0    10     0    -1 #> [24,]     0     0     0     0     0     0     0     0     0     0     5     0 #> [25,]    -1     0     0     0    -1     0     0     0     0    -1     0     7 #> attr(,\"representation\") #> [1] \"laplacian\" #>  #> [[2]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    9    0   -1   -1   -1    0   -1    0   -1    -1     0     0     0 #>  [2,]    0    7    0    0   -1   -1   -1    0   -1     0     0     0    -1 #>  [3,]   -1    0    8    0    0   -1    0   -1    0     0     0    -1     0 #>  [4,]   -1    0    0    8    0    0    0   -1    0     0    -1     0     0 #>  [5,]   -1   -1    0    0    7   -1    0    0   -1     0     0     0     0 #>  [6,]    0   -1   -1    0   -1   10    0    0    0    -1    -1    -1     0 #>  [7,]   -1   -1    0    0    0    0    6   -1    0     0     0    -1     0 #>  [8,]    0    0   -1   -1    0    0   -1    7    0     0    -1    -1     0 #>  [9,]   -1   -1    0    0   -1    0    0    0    7     0     0    -1     0 #> [10,]   -1    0    0    0    0   -1    0    0    0     8     0     0    -1 #> [11,]    0    0    0   -1    0   -1    0   -1    0     0     9    -1    -1 #> [12,]    0    0   -1    0    0   -1   -1   -1   -1     0    -1    11     0 #> [13,]    0   -1    0    0    0    0    0    0    0    -1    -1     0     8 #> [14,]    0    0    0   -1    0   -1    0    0    0     0     0     0     0 #> [15,]    0    0    0    0    0   -1    0    0    0    -1     0    -1    -1 #> [16,]    0    0    0   -1    0    0    0    0    0    -1    -1    -1     0 #> [17,]    0    0   -1    0    0    0    0    0    0     0     0     0    -1 #> [18,]   -1    0    0    0   -1    0    0    0    0    -1     0    -1     0 #> [19,]   -1    0    0    0    0    0    0   -1    0     0     0     0    -1 #> [20,]    0    0    0   -1   -1    0    0    0   -1     0    -1     0    -1 #> [21,]    0    0   -1    0    0    0   -1    0   -1     0    -1     0     0 #> [22,]    0   -1   -1   -1    0    0    0    0    0     0    -1    -1     0 #> [23,]   -1   -1   -1    0   -1   -1    0   -1    0     0     0     0     0 #> [24,]    0    0    0   -1    0    0   -1    0    0    -1     0     0     0 #> [25,]    0    0    0    0    0   -1    0    0   -1    -1     0    -1    -1 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]     0     0     0     0    -1    -1     0     0     0    -1     0     0 #>  [2,]     0     0     0     0     0     0     0     0    -1    -1     0     0 #>  [3,]     0     0     0    -1     0     0     0    -1    -1    -1     0     0 #>  [4,]    -1     0    -1     0     0     0    -1     0    -1     0    -1     0 #>  [5,]     0     0     0     0    -1     0    -1     0     0    -1     0     0 #>  [6,]    -1    -1     0     0     0     0     0     0     0    -1     0    -1 #>  [7,]     0     0     0     0     0     0     0    -1     0     0    -1     0 #>  [8,]     0     0     0     0     0    -1     0     0     0    -1     0     0 #>  [9,]     0     0     0     0     0     0    -1    -1     0     0     0    -1 #> [10,]     0    -1    -1     0    -1     0     0     0     0     0    -1    -1 #> [11,]     0     0    -1     0     0     0    -1    -1    -1     0     0     0 #> [12,]     0    -1    -1     0    -1     0     0     0    -1     0     0    -1 #> [13,]     0    -1     0    -1     0    -1    -1     0     0     0     0    -1 #> [14,]     2     0     0     0     0     0     0     0     0     0     0     0 #> [15,]     0     7     0    -1     0     0     0     0     0    -1     0    -1 #> [16,]     0     0     8    -1     0     0    -1    -1     0     0    -1     0 #> [17,]     0    -1    -1     7     0     0     0     0    -1    -1    -1     0 #> [18,]     0     0     0     0     6    -1    -1     0     0     0     0     0 #> [19,]     0     0     0     0    -1     5    -1     0     0     0     0     0 #> [20,]     0     0    -1     0    -1    -1     9     0     0     0    -1     0 #> [21,]     0     0    -1     0     0     0     0     6    -1     0     0     0 #> [22,]     0     0     0    -1     0     0     0    -1     9    -1     0    -1 #> [23,]     0    -1     0    -1     0     0     0     0    -1     9     0     0 #> [24,]     0     0    -1    -1     0     0    -1     0     0     0     6     0 #> [25,]     0    -1     0     0     0     0     0     0    -1     0     0     7 #> attr(,\"representation\") #> [1] \"laplacian\" #>  #> [[3]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    5    0    0    0    0    0    0    0    0     0     0     0     0 #>  [2,]    0    5    0    0    0    0    0    0    0    -1     0    -1     0 #>  [3,]    0    0    8   -1   -1   -1   -1    0   -1     0     0     0     0 #>  [4,]    0    0   -1   10   -1    0    0   -1   -1     0     0     0     0 #>  [5,]    0    0   -1   -1    4    0    0    0    0     0     0     0     0 #>  [6,]    0    0   -1    0    0    7    0   -1    0     0     0     0    -1 #>  [7,]    0    0   -1    0    0    0    7    0    0     0     0    -1     0 #>  [8,]    0    0    0   -1    0   -1    0    8   -1    -1     0     0     0 #>  [9,]    0    0   -1   -1    0    0    0   -1    8    -1    -1    -1    -1 #> [10,]    0   -1    0    0    0    0    0   -1   -1     5     0     0     0 #> [11,]    0    0    0    0    0    0    0    0   -1     0     4    -1     0 #> [12,]    0   -1    0    0    0    0   -1    0   -1     0    -1     8     0 #> [13,]    0    0    0    0    0   -1    0    0   -1     0     0     0     5 #> [14,]    0    0    0    0    0   -1   -1   -1    0     0     0     0     0 #> [15,]   -1    0    0    0    0   -1    0    0   -1     0     0     0     0 #> [16,]   -1    0   -1   -1   -1    0    0    0    0    -1     0    -1    -1 #> [17,]   -1   -1    0   -1    0   -1   -1    0    0     0     0    -1     0 #> [18,]   -1   -1    0   -1    0   -1    0   -1    0     0    -1     0     0 #> [19,]   -1    0    0   -1    0    0    0   -1    0     0     0     0    -1 #> [20,]    0    0    0   -1   -1    0   -1   -1    0    -1     0    -1    -1 #> [21,]    0   -1    0    0    0    0   -1    0    0     0     0     0     0 #> [22,]    0    0   -1    0    0    0   -1    0    0     0     0     0     0 #> [23,]    0    0   -1    0    0    0    0    0    0     0     0     0     0 #> [24,]    0    0    0   -1    0    0    0    0    0     0     0    -1     0 #> [25,]    0    0    0    0    0    0    0    0    0     0    -1     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]     0    -1    -1    -1    -1    -1     0     0     0     0     0     0 #>  [2,]     0     0     0    -1    -1     0     0    -1     0     0     0     0 #>  [3,]     0     0    -1     0     0     0     0     0    -1    -1     0     0 #>  [4,]     0     0    -1    -1    -1    -1    -1     0     0     0    -1     0 #>  [5,]     0     0    -1     0     0     0    -1     0     0     0     0     0 #>  [6,]    -1    -1     0    -1    -1     0     0     0     0     0     0     0 #>  [7,]    -1     0     0    -1     0     0    -1    -1    -1     0     0     0 #>  [8,]    -1     0     0     0    -1    -1    -1     0     0     0     0     0 #>  [9,]     0    -1     0     0     0     0     0     0     0     0     0     0 #> [10,]     0     0    -1     0     0     0    -1     0     0     0     0     0 #> [11,]     0     0     0     0    -1     0     0     0     0     0     0    -1 #> [12,]     0     0    -1    -1     0     0    -1     0     0     0    -1     0 #> [13,]     0     0    -1     0     0    -1    -1     0     0     0     0     0 #> [14,]     3     0     0     0     0     0     0     0     0     0     0     0 #> [15,]     0     3     0     0     0     0     0     0     0     0     0     0 #> [16,]     0     0    10     0    -1    -1     0     0     0    -1     0     0 #> [17,]     0     0     0     9    -1     0     0     0     0    -1     0    -1 #> [18,]     0     0    -1    -1    10     0     0     0    -1     0     0    -1 #> [19,]     0     0    -1     0     0     6     0    -1     0     0     0     0 #> [20,]     0     0     0     0     0     0    10    -1    -1     0     0    -1 #> [21,]     0     0     0     0     0    -1    -1     4     0     0     0     0 #> [22,]     0     0     0     0    -1     0    -1     0     4     0     0     0 #> [23,]     0     0    -1    -1     0     0     0     0     0     4    -1     0 #> [24,]     0     0     0     0     0     0     0     0     0    -1     3     0 #> [25,]     0     0     0    -1    -1     0    -1     0     0     0     0     4 #> attr(,\"representation\") #> [1] \"laplacian\""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"distances-between-networks","dir":"Articles","previous_headings":"","what":"Distances between networks","title":"Network-Valued Data Analysis","text":"possible choose distance consider analysis. Let \\(G\\) \\(H\\) two networks \\(N\\) nodes suppose \\(X\\) \\(Y\\) matrix representations \\(G\\) \\(H\\), respectively. user can currently choose among 4 distances: Hamming, Frobenius, spectral root-Euclidean.","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"hamming-distance","dir":"Articles","previous_headings":"Distances between networks","what":"Hamming distance","title":"Network-Valued Data Analysis","text":"\\[ \\rho_H(G,H)=\\frac{1}{N(N-1)}\\sum_{\\neq j}^N \\bigl\\arrowvert X_{,j}-Y_{,j} \\bigr\\arrowvert. \\] nevada, distance can computed dist_hamming().","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"frobenius-distance","dir":"Articles","previous_headings":"Distances between networks","what":"Frobenius distance","title":"Network-Valued Data Analysis","text":"\\[ \\rho_F(G,H) = \\left\\| X - Y \\right\\|_F^2 = \\sum_{\\neq j}^N \\bigl ( X_{,j}-Y_{,j} \\bigr )^2. \\] nevada, distance can computed dist_frobenius().","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"spectral-distance","dir":"Articles","previous_headings":"Distances between networks","what":"Spectral distance","title":"Network-Valued Data Analysis","text":"\\[ \\rho_S(G,H)=\\sum_{\\neq j}^N \\bigl ( \\Lambda^X_{,j}-\\Lambda^Y_{,j} \\bigr )^2, \\] \\(\\Lambda^X\\) \\(\\Lambda^Y\\) diagonal matrices eigenvalues diagonal given spectral decomposition matrix representations \\(G\\) \\(H\\). nevada, distance can computed dist_spectral().","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"root-euclidean-distance","dir":"Articles","previous_headings":"Distances between networks","what":"Root Euclidean distance","title":"Network-Valued Data Analysis","text":"\\[ \\rho_{RE}(G,H) = \\left\\| X^{1/2} - Y^{1/2} \\right\\|_F^2. \\] Note distance compatible matrix representations requires representation semi-positive definite. nevada, distance can computed dist_root_euclidean().","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"computing-a-matrix-of-pairwise-distances-for-an-object-of-class-nvd","dir":"Articles","previous_headings":"Distances between networks","what":"Computing a matrix of pairwise distances for an object of class nvd","title":"Network-Valued Data Analysis","text":"Pre-computation matrix pairwise distances samples networks alleviates computational burden permutation testing. nevada provides convenient dist_nvd() function exactly object class nvd.","code":"x <- nvd(model = \"gnp\", n = 3, model_params = list(p = 1/3)) dist_nvd(x, representation = \"laplacian\", distance = \"hamming\") #>           1         2 #> 2 0.5166667           #> 3 0.6000000 0.5266667"},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"test-statistics","dir":"Articles","previous_headings":"","what":"Test statistics","title":"Network-Valued Data Analysis","text":"nevada package designed work well flipr package, handles permutation scheme suitable representation, distance test statistics chosen. efficient way two-sample testing network-valued data pertains use statistics based inter-point distances, pairwise distances observations.","code":""},{"path":[]},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"from-flipr","dir":"Articles","previous_headings":"Test statistics > Available statistics","what":"From flipr","title":"Network-Valued Data Analysis","text":"number test statistics along line proposed literature, including (Lovato et al. 2020). test statistics rely inter-point distances, specific network-valued data. , can found flipr. adopt naming convention test statistic function shall start prefix stat_. statistics based inter-point distances named suffix _ip. list test statistics based inter-point distances currently available flipr: stat_student_ip() alias stat_t_ip() implement Student-like test statistic based inter-point distances proposed Lovato et al. (2020); stat_fisher_ip() alias stat_f_ip() implement Fisher-like test statistic based inter-point distances proposed Lovato et al. (2020); stat_bg_ip() implements statistic proposed Biswas Ghosh (2014); stat_energy_ip() implements class energy-based statistics proposed Székely Rizzo (2013); stat_cq_ip() implements statistic proposed S. X. Chen Qin (2010); stat_mod_ip() implements statistic computes mean inter-point distances; stat_dom_ip() implements statistic computes distance medoids two samples, possibly standardized pooled corresponding variances.","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"from-nevada","dir":"Articles","previous_headings":"Test statistics > Available statistics","what":"From nevada","title":"Network-Valued Data Analysis","text":"also 3 statistics proposed H. Chen, Chen, Su (2018) based similarity graph built top distance matrix: stat_original_edge_count(), stat_generalized_edge_count(), stat_weighted_edge_count(). also Student-like statistics available Frobenius distance can easily compute Fréchet mean. : stat_student_euclidean(), stat_welch_euclidean().","code":""},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"write-your-own-test-statistic-function","dir":"Articles","previous_headings":"Test statistics > Available statistics","what":"Write your own test statistic function","title":"Network-Valued Data Analysis","text":"addition test statistic functions already implemented flipr nevada, can also implement function. Test statistic functions compatible flipr least two mandatory input arguments: data either concatenated list size \\(n_x + n_y\\) regrouping data points samples distance matrix size \\((n_x + n_y) \\times (n_x + n_y)\\) stored object class dist. indices1 integer vector size \\(n_x\\) storing indices data points belonging first sample current permuted version data. flipr package provides helper function use_stat(nsamples = 2, stat_name = ) makes easy users create test statistic ready used nevada. function creates saves .R file R/ folder current working directory populates following template: instance, flipr-compatible version \\(t\\)-statistic pooled variance look like:","code":"#' Test Statistic for the Two-Sample Problem #' #' This function computes the test statistic... #' #' @param data A list storing the concatenation of the two samples from which #'   the user wants to make inference. Alternatively, a distance matrix stored #'   in an object of class \\code{\\link[stats]{dist}} of pairwise distances #'   between data points. #' @param indices1 An integer vector that contains the indices of the data #'   points belong to the first sample in the current permuted version of the #'   data. #' #' @return A numeric value evaluating the desired test statistic. #' @export #' #' @examples #' # TO BE DONE BY THE DEVELOPER OF THE PACKAGE stat_{{{name}}} <- function(data, indices1) {   n <- if (inherits(data, \"dist\"))     attr(data, \"Size\")   else if (inherits(data, \"list\"))     length(data)   else     stop(\"The `data` input should be of class either list or dist.\")    indices2 <- seq_len(n)[-indices1]    x <- data[indices1]   y <- data[indices2]    # Here comes the code that computes the desired test   # statistic from input samples stored in lists x and y  } stat_student <- function(data, indices1) {   n <- if (inherits(data, \"dist\"))     attr(data, \"Size\")   else if (inherits(data, \"list\"))     length(data)   else     stop(\"The `data` input should be of class either list or dist.\")    indices2 <- seq_len(n)[-indices1]    x <- data[indices1]   y <- data[indices2]      # Here comes the code that computes the desired test   # statistic from input samples stored in lists x and y   x <- unlist(x)   y <- unlist(y)      stats::t.test(x, y, var.equal = TRUE)$statistic }"},{"path":[]},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"naming-conventions","dir":"Articles","previous_headings":"Test statistics > Usage","what":"Naming conventions","title":"Network-Valued Data Analysis","text":"Test statistics passed functions test2_global() test2_local() via argument stats accepts character vector : statistics nevada expected named without stat_ prefix (e.g. \"original_edge_count\" \"student_euclidean\"). statistics flipr expected named without stat_ prefix adding flipr: prefix (e.g., \"flipr:student_ip\"). statistics package pkg expected named without stat_ prefix adding pkg: prefix. Note can also refer test statistic function nevada using naming \"nevada:original_edge_count\" test statistics flipr. mandatory instance yet loaded nevada environment via library(nevada).","code":"x <- nvd(model = \"gnp\", n = 10, model_params = list(p = 1/3)) y <- nvd(model = \"k_regular\" , n = 10, model_params = list(k = 8L)) test2_global(   x = x,    y = y,    representation = \"laplacian\",    distance = \"frobenius\",    stats = c(\"flipr:student_ip\", \"flipr:fisher_ip\"),    seed = 1234 )$pvalue #> [1] 0.0009962984"},{"path":"https://astamm.github.io/nevada/articles/nevada.html","id":"using-multiple-test-statistics","dir":"Articles","previous_headings":"Test statistics > Usage","what":"Using multiple test statistics","title":"Network-Valued Data Analysis","text":"permutation testing, choice test statistic determines alternative hypothesis, null hypothesis always distributions generated observed samples . means use Student statistic stat_student_ip() instance, actually testing whether means distributions different. ’d rather sensitive differences variances distributions, go Fisher statistic stat_fisher_ip(). can also sensitive multiple aspects distribution testing via permutation framework. achieved hood flipr package implements -called non-parametric combination (NPC) approach proposed Pesarin Salmaso (2010) provide one test statistics stats argument. can read article know implementation flipr. bottom line , example, can choose Student Fisher statistics test simultaneously differences mean variance.","code":""},{"path":[]},{"path":"https://astamm.github.io/nevada/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ilenia Lovato. Author. Alessia Pini. Author. Aymeric Stamm. Author, maintainer. Simone Vantini. Author.","code":""},{"path":"https://astamm.github.io/nevada/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lovato , Pini , Stamm , Vantini S (2023). nevada: Network-Valued Data Analysis. https://astamm.github.io/nevada/, https://github.com/astamm/nevada/.","code":"@Manual{,   title = {nevada: Network-Valued Data Analysis},   author = {Ilenia Lovato and Alessia Pini and Aymeric Stamm and Simone Vantini},   year = {2023},   note = {https://astamm.github.io/nevada/, https://github.com/astamm/nevada/}, }"},{"path":"https://astamm.github.io/nevada/index.html","id":"overview-","dir":"","previous_headings":"","what":"Network-Valued Data Analysis","title":"Network-Valued Data Analysis","text":"package nevada (NEtwork-VAlued Data Analysis) R package statistical analysis network-valued data. setting, sample made statistical units networks . package provides set matrix representations networks network-valued data can transformed matrix-valued data. Subsequently, number distances matrices provided well quantify far two networks several test statistics proposed testing equality distribution samples networks using exact permutation testing procedures. permutation scheme carried flipr package also provides number test statistics based inter-point distances play nicely network-valued data. implementation largely made C++ matrix inter- intra-sample distances pre-computed, alleviates computational burden often associated permutation tests.","code":""},{"path":"https://astamm.github.io/nevada/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Network-Valued Data Analysis","text":"can install latest stable version nevada CRAN : can install development version GitHub :","code":"install.packages(\"nevada\") # install.packages(\"remotes\") remotes::install_github(\"astamm/nevada\")"},{"path":[]},{"path":"https://astamm.github.io/nevada/index.html","id":"example-1","dir":"","previous_headings":"Usage","what":"Example 1","title":"Network-Valued Data Analysis","text":"first example, compare two populations networks generated according two different models (Watts-Strogatz Barabasi), using adjacency matrix representation networks, Frobenius distance compare single networks combination Student-like Fisher-like statistics based inter-point distances summarize information perform permutation test. default nvd() constructor generates networks 25 nodes. One can wonder whether difference distributions generated two samples (given models used). test2_global() function provides answer question: p-value small, leading conclusion reject null hypothesis equal distributions. Although fake example, create partition try localize differences along partition: test2_local() function provides answer question:","code":"set.seed(123) n <- 10L x <- nevada::nvd(   model = \"smallworld\",    n = n,    model_params = list(dim = 1L, nei = 4L, p = 0.15) ) y <- nevada::nvd(   model = \"pa\",    n = n,    model_params = list(power = 1L, m = NULL, directed = FALSE) ) t1_global <- nevada::test2_global(x, y, seed = 1234) t1_global$pvalue [1] 0.0009962984 partition <- as.integer(c(1:5, each = 5)) t1_local <- nevada::test2_local(x, y, partition, seed = 1234) t1_local $intra # A tibble: 5 × 3   E      pvalue truncated   <chr>   <dbl> <lgl>     1 P1    0.175   TRUE      2 P2    0.175   TRUE      3 P3    0.175   TRUE      4 P4    0.0859  TRUE      5 P5    0.00299 FALSE      $inter # A tibble: 10 × 4    E1    E2      pvalue truncated    <chr> <chr>    <dbl> <lgl>      1 P1    P2    0.175    TRUE       2 P1    P3    0.175    TRUE       3 P1    P4    0.0859   TRUE       4 P1    P5    0.0240   FALSE      5 P2    P3    0.175    TRUE       6 P2    P4    0.00499  FALSE      7 P2    P5    0.000996 FALSE      8 P3    P4    0.0140   FALSE      9 P3    P5    0.00200  FALSE     10 P4    P5    0.0420   FALSE"},{"path":"https://astamm.github.io/nevada/index.html","id":"example-2","dir":"","previous_headings":"Usage","what":"Example 2","title":"Network-Valued Data Analysis","text":"second example, compare two populations networks generated according model (Watts-Strogatz), using adjacency matrix representation networks, Frobenius distance compare single networks combination Student-like Fisher-like statistics based inter-point distances summarize information perform permutation test. One can wonder whether difference distributions generated two samples (given models used). test2_global() function provides answer question: p-value larger 5% even 10%, leading us failing reject null hypothesis equal distributions significance thresholds.","code":"n <- 10L x <- nevada::nvd(\"smallworld\", n) y <- nevada::nvd(\"smallworld\", n) t2 <- nevada::test2_global(x, y, seed = 1234) t2$pvalue [1] 0.9999973"},{"path":"https://astamm.github.io/nevada/reference/as_nvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Coercion to Network-Valued Data Object — as_nvd","title":"Coercion to Network-Valued Data Object — as_nvd","text":"function flags list igraph objects nvd object defined package.","code":""},{"path":"https://astamm.github.io/nevada/reference/as_nvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coercion to Network-Valued Data Object — as_nvd","text":"","code":"as_nvd(obj)"},{"path":"https://astamm.github.io/nevada/reference/as_nvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coercion to Network-Valued Data Object — as_nvd","text":"obj list igraph objects.","code":""},{"path":"https://astamm.github.io/nevada/reference/as_nvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coercion to Network-Valued Data Object — as_nvd","text":"nvd object.","code":""},{"path":"https://astamm.github.io/nevada/reference/as_nvd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coercion to Network-Valued Data Object — as_nvd","text":"","code":"gnp_params <- list(p = 1/3) as_nvd(nvd(model = \"gnp\", n = 10L, model_params = gnp_params)) #> [[1]] #> IGRAPH 8d77fdf U--- 25 99 -- Erdos-Renyi (gnp) graph #> + attr: name (g/c), type (g/c), loops (g/l), p (g/n) #> + edges from 8d77fdf: #>  [1]  1-- 5  2-- 5  3-- 5  1-- 6  1-- 7  5-- 7  1-- 8  4-- 8  6-- 8  1-- 9 #> [11]  8-- 9  1--10  4--10  1--11  5--11  6--11  7--11  8--11 10--11  2--12 #> [21]  6--12 10--12  5--13  1--14  2--14  3--14  4--14  5--14  9--14 12--14 #> [31] 13--14  1--15  2--15  4--15  5--15  9--15 10--15 13--15  1--16  4--16 #> [41] 12--16  7--17 11--17  8--18  9--18 10--18 16--18 17--18  6--19 10--19 #> [51] 11--19 15--19 18--19  1--20  4--20  5--20  7--20 14--20 16--20 18--20 #> [61] 19--20  4--21  6--21  7--21  8--21 12--21 16--21  2--22  5--22  8--22 #> [71]  9--22 11--22 12--22 14--22 15--22 17--22 19--22 20--22  1--23  5--23 #> + ... omitted several edges #>  #> [[2]] #> IGRAPH 102a9fb U--- 25 93 -- Erdos-Renyi (gnp) graph #> + attr: name (g/c), type (g/c), loops (g/l), p (g/n) #> + edges from 102a9fb: #>  [1]  1-- 3  1-- 4  1-- 5  2-- 5  2-- 6  3-- 6  5-- 6  1-- 7  2-- 7  3-- 8 #> [11]  4-- 8  7-- 8  1-- 9  2-- 9  5-- 9  1--10  6--10  4--11  6--11  8--11 #> [21]  3--12  6--12  7--12  8--12  9--12 11--12  2--13 10--13 11--13  4--14 #> [31]  6--14  6--15 10--15 12--15 13--15  4--16 10--16 11--16 12--16  3--17 #> [41] 13--17 15--17 16--17  1--18  5--18 10--18 12--18  1--19  8--19 13--19 #> [51] 18--19  4--20  5--20  9--20 11--20 13--20 16--20 18--20 19--20  3--21 #> [61]  7--21  9--21 11--21 16--21  2--22  3--22  4--22 11--22 12--22 17--22 #> [71] 21--22  1--23  2--23  3--23  5--23  6--23  8--23 15--23 17--23 22--23 #> + ... omitted several edges #>  #> [[3]] #> IGRAPH 238a6fc U--- 25 77 -- Erdos-Renyi (gnp) graph #> + attr: name (g/c), type (g/c), loops (g/l), p (g/n) #> + edges from 238a6fc: #>  [1]  3-- 4  3-- 5  4-- 5  3-- 6  3-- 7  4-- 8  6-- 8  3-- 9  4-- 9  8-- 9 #> [11]  2--10  8--10  9--10  9--11  2--12  7--12  9--12 11--12  6--13  9--13 #> [21]  6--14  7--14  8--14  1--15  6--15  9--15  1--16  3--16  4--16  5--16 #> [31] 10--16 12--16 13--16  1--17  2--17  4--17  6--17  7--17 12--17  1--18 #> [41]  2--18  4--18  6--18  8--18 11--18 16--18 17--18  1--19  4--19  8--19 #> [51] 13--19 16--19  4--20  5--20  7--20  8--20 10--20 12--20 13--20  2--21 #> [61]  7--21 19--21 20--21  3--22  7--22 18--22 20--22  3--23 16--23 17--23 #> [71]  4--24 12--24 23--24 11--25 17--25 18--25 20--25 #>  #> [[4]] #> IGRAPH 9358dcd U--- 25 99 -- Erdos-Renyi (gnp) graph #> + attr: name (g/c), type (g/c), loops (g/l), p (g/n) #> + edges from 9358dcd: #>  [1]  1-- 2  1-- 4  2-- 4  2-- 5  4-- 5  1-- 6  2-- 6  3-- 6  4-- 6  5-- 6 #> [11]  3-- 7  5-- 7  3-- 8  4-- 8  5-- 8  5-- 9  2--10  5--10  6--11  1--12 #> [21]  2--12  4--12  5--12  6--12  8--12  9--12  1--13  9--13 10--13 12--13 #> [31]  2--14  4--14  6--14  7--14 10--14  1--15  3--15  8--15  9--15 10--15 #> [41] 14--15  2--16  4--16  5--16  8--16 12--16  2--17 10--17 14--17 16--17 #> [51]  1--18  4--18  5--18  6--18 11--18 13--18 15--18 16--18  1--19  3--19 #> [61]  6--19  8--19 11--19 13--19 14--19  1--20  2--20  6--20  7--20  9--20 #> [71] 13--20  3--21 13--21 19--21  4--22  8--22 10--22 11--22 12--22 14--22 #> + ... omitted several edges #>  #> [[5]] #> IGRAPH e2656b4 U--- 25 99 -- Erdos-Renyi (gnp) graph #> + attr: name (g/c), type (g/c), loops (g/l), p (g/n) #> + edges from e2656b4: #>  [1]  1-- 2  2-- 3  1-- 4  3-- 4  3-- 5  5-- 6  4-- 8  5-- 8  1-- 9  2-- 9 #> [11]  5-- 9  6-- 9  1--10  2--10  5--10  9--10  8--11 10--11  3--12  6--12 #> [21]  9--12  2--13  3--13 10--13 11--13  4--14 12--14 13--14  1--15  3--15 #> [31]  4--15  6--15  7--15  8--15 11--15 14--15  5--16  6--16 11--16  4--17 #> [41]  6--17  7--17  8--17  9--17 10--17  4--18  6--18  8--18 10--18 11--18 #> [51] 13--18 15--18  2--19  6--19  9--19 12--19 16--19 18--19  1--20  2--20 #> [61]  3--20  5--20  7--20  8--20 11--20 15--20  1--21  2--21  9--21 12--21 #> [71] 15--21 18--21 20--21  1--22 10--22 12--22 15--22 20--22 21--22  1--23 #> + ... omitted several edges #>  #> [[6]] #> IGRAPH e7192eb U--- 25 100 -- Erdos-Renyi (gnp) graph #> + attr: name (g/c), type (g/c), loops (g/l), p (g/n) #> + edges from e7192eb: #>  [1]  1-- 4  2-- 4  3-- 4  1-- 5  4-- 6  3-- 7  5-- 7  3-- 8  5-- 8  6-- 9 #> [11]  8-- 9  2--10  3--10  9--10  3--11  9--11  6--12  8--12  4--13  6--13 #> [21]  8--13 10--13  2--14  5--14  9--14  1--15  5--15  8--15  9--15 10--15 #> [31] 11--15  1--16 12--16  2--17  4--17  7--17  8--17 11--17 13--17 15--17 #> [41]  1--18  3--18  5--18 16--18 17--18  9--19 10--19 12--19 15--19 16--19 #> [51] 17--19  3--20  8--20  9--20 11--20 12--20 15--20 17--20 19--20  1--21 #> [61]  3--21  7--21 11--21 12--21 13--21 20--21  1--22  8--22 10--22 12--22 #> [71] 16--22 17--22 19--22 21--22  6--23  7--23 10--23 14--23 17--23 22--23 #> + ... omitted several edges #>  #> [[7]] #> IGRAPH f46fd5b U--- 25 100 -- Erdos-Renyi (gnp) graph #> + attr: name (g/c), type (g/c), loops (g/l), p (g/n) #> + edges from f46fd5b: #>  [1]  2-- 3  1-- 5  3-- 6  4-- 6  5-- 6  1-- 7  2-- 7  4-- 8  7-- 9  3--10 #> [11]  1--11  2--11  4--11  7--11  9--11  1--12  4--12  7--12 10--12  1--13 #> [21]  5--13  8--13 11--13  6--14  8--14  9--14  2--15  6--15  7--15 10--15 #> [31]  3--16  6--16  9--16 14--16  5--17 13--17 16--17  4--18  6--18  7--18 #> [41] 10--18 12--18 13--18  2--19  3--19  5--19  6--19 15--19 16--19  1--20 #> [51]  2--20  5--20  6--20  8--20  9--20 12--20 15--20 16--20 19--20  1--21 #> [61]  2--21  3--21  4--21  7--21  9--21 11--21 15--21 16--21 18--21 20--21 #> [71]  3--22  6--22  9--22 14--22 17--22 19--22  2--23  4--23  9--23 11--23 #> + ... omitted several edges #>  #> [[8]] #> IGRAPH 44ad528 U--- 25 106 -- Erdos-Renyi (gnp) graph #> + attr: name (g/c), type (g/c), loops (g/l), p (g/n) #> + edges from 44ad528: #>  [1]  1-- 2  1-- 4  4-- 5  3-- 6  6-- 7  4-- 8  6-- 8  7-- 8  4-- 9  7-- 9 #> [11]  3--10  6--10  9--10  1--11  8--11  9--11 10--11  1--12  3--12  7--12 #> [21]  2--13  3--13  4--13  5--13  6--13  7--13 10--13 11--13  2--14 10--14 #> [31] 11--14  4--15 10--15 11--15 13--15 14--15  1--16  8--16 15--16  3--17 #> [41]  4--17  6--17  9--17 10--17 11--17 13--17 15--17  2--18  3--18  8--18 #> [51] 10--18 13--18 14--18 15--18  9--19 11--19 12--19 17--19  8--20  9--20 #> [61] 12--20 14--20 15--20  1--21  2--21  4--21 15--21 16--21 17--21 19--21 #> [71]  1--22  5--22  6--22  7--22 11--22 12--22 14--22 16--22 17--22 18--22 #> + ... omitted several edges #>  #> [[9]] #> IGRAPH 68bfcc9 U--- 25 113 -- Erdos-Renyi (gnp) graph #> + attr: name (g/c), type (g/c), loops (g/l), p (g/n) #> + edges from 68bfcc9: #>  [1]  1-- 3  2-- 3  3-- 4  1-- 5  3-- 5  4-- 5  2-- 6  3-- 6  4-- 6  5-- 6 #> [11]  1-- 7  4-- 7  1-- 8  1-- 9  7-- 9  1--10  4--10  5--10  6--10  7--10 #> [21]  1--11  3--11  5--11  6--11  7--11  2--12  3--12  6--12  7--12  1--13 #> [31]  2--13  4--13  5--13  7--13  8--13  1--14  3--14  7--14  8--14  9--14 #> [41] 12--14  1--15  3--15  5--15  7--15  8--16 15--16  1--17  4--17  5--17 #> [51]  9--17 11--17 13--17 15--17 16--17  1--18 10--18 11--18 12--18  2--19 #> [61]  5--19  8--19  9--19 11--19 13--19 15--19  2--20  6--20 11--20 15--20 #> [71] 19--20  3--21  6--21  7--21 11--21 13--21  1--22  7--22  8--22  9--22 #> + ... omitted several edges #>  #> [[10]] #> IGRAPH aba2766 U--- 25 105 -- Erdos-Renyi (gnp) graph #> + attr: name (g/c), type (g/c), loops (g/l), p (g/n) #> + edges from aba2766: #>  [1]  1-- 2  2-- 3  2-- 5  3-- 5  1-- 6  4-- 6  2-- 7  3-- 7  2-- 9  4-- 9 #> [11]  6-- 9  1--10  2--10  3--10  4--10  6--10  2--11  3--11  4--11  5--11 #> [21]  7--11  8--11  9--11  2--12  3--12  5--12 10--12  1--13  2--13  8--13 #> [31] 12--13  1--14  4--14  5--14 11--14 13--14  6--15  8--15  9--15 10--15 #> [41] 11--15 13--15 14--15  1--16  2--16  4--16  8--16 10--16 13--16  3--17 #> [51]  4--17  9--17 10--17 13--17 14--17 15--17  6--18  8--18 11--18 14--18 #> [61] 16--18 17--18  3--19  5--19 11--19 12--19 15--19 16--19  5--20  7--20 #> [71]  9--20 10--20 12--20 15--20  2--21  3--21 14--21 16--21 18--21 19--21 #> + ... omitted several edges #>  #> attr(,\"class\") #> [1] \"nvd\"  \"list\""},{"path":"https://astamm.github.io/nevada/reference/as_vertex_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Coercion to Vertex Partition — as_vertex_partition","title":"Coercion to Vertex Partition — as_vertex_partition","text":"function converts vector memberships proper vertex partition object.","code":""},{"path":"https://astamm.github.io/nevada/reference/as_vertex_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coercion to Vertex Partition — as_vertex_partition","text":"","code":"as_vertex_partition(x)"},{"path":"https://astamm.github.io/nevada/reference/as_vertex_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coercion to Vertex Partition — as_vertex_partition","text":"x list grouping vertices partition element integer character vector vertex memberships.","code":""},{"path":"https://astamm.github.io/nevada/reference/as_vertex_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coercion to Vertex Partition — as_vertex_partition","text":"vertex_partition object storing corresponding vertex partition.","code":""},{"path":"https://astamm.github.io/nevada/reference/as_vertex_partition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coercion to Vertex Partition — as_vertex_partition","text":"","code":"m1 <- c(\"P1\", \"P3\", \"P4\", \"P1\", \"P2\", \"P2\", \"P3\", \"P1\", \"P4\", \"P3\") V1 <- as_vertex_partition(m1) m2 <- as.integer(c(1, 3, 4, 1, 2, 2, 3, 1, 4, 3)) V2 <- as_vertex_partition(m2)"},{"path":"https://astamm.github.io/nevada/reference/dist_nvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise Distance Matrix Between Two Samples of Networks — dist_nvd","title":"Pairwise Distance Matrix Between Two Samples of Networks — dist_nvd","text":"function computes matrix pairwise distances elements two samples put together. cardinality fist sample denoted \\(n_1\\) second one denoted \\(n_2\\).","code":""},{"path":"https://astamm.github.io/nevada/reference/dist_nvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise Distance Matrix Between Two Samples of Networks — dist_nvd","text":"","code":"dist_nvd(   x,   y = NULL,   representation = \"adjacency\",   distance = \"frobenius\",   matching_iterations = 0,   target_matrix = NULL )"},{"path":"https://astamm.github.io/nevada/reference/dist_nvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise Distance Matrix Between Two Samples of Networks — dist_nvd","text":"x base::list igraph::igraph objects matrix representations underlying networks given first population. y base::list igraph::igraph objects matrix representations underlying networks given second population. representation string specifying desired type representation, among: \"adjacency\", \"laplacian\", \"modularity\" \"graphon\". Default \"laplacian\". distance string specifying chosen distance calculating test statistic, among: \"hamming\", \"frobenius\", \"spectral\" \"root-euclidean\". Default \"frobenius\". matching_iterations integer value specifying maximum number runs looking optimal permutation graph matching. Defaults 0L case matching done. target_matrix square numeric matrix size n equal order graphs specifying target matrix towards initial doubly stochastic matrix shrunk time graph matching algorithm fails provide good minimum. Defaults NULL case target matrix automatically chosen identity matrix uniform matrix n-simplex.","code":""},{"path":"https://astamm.github.io/nevada/reference/dist_nvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise Distance Matrix Between Two Samples of Networks — dist_nvd","text":"matrix dimension \\((n_1+n_2) \\times (n_1+n_2)\\) containing distances elements two samples put together.","code":""},{"path":"https://astamm.github.io/nevada/reference/dist_nvd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise Distance Matrix Between Two Samples of Networks — dist_nvd","text":"","code":"gnp_params <- list(p = 1/3) k_regular_params <- list(k = 8L) x <- nvd(model = \"gnp\", n = 10L, model_params = gnp_params) y <- nvd(model = \"k_regular\", n = 10L, model_params = k_regular_params) dist_nvd(x, y, \"adjacency\", \"spectral\") #>            1         2         3         4         5         6         7 #> 2  1.6182188                                                             #> 3  2.3346721 1.8292590                                                   #> 4  1.1531221 1.5285844 2.5969306                                         #> 5  0.8849856 1.2821958 2.2823249 1.0825085                               #> 6  1.1944673 1.2631468 2.4347225 1.1013615 1.1837482                     #> 7  1.4816634 1.6130956 2.7044969 1.1519232 1.4293345 1.1551931           #> 8  1.2675737 1.6677161 2.7477164 1.1587275 1.0161804 1.4433108 1.7222259 #> 9  1.5200807 2.2334176 3.3293784 1.2728087 1.5360785 1.5198496 1.5080376 #> 10 1.1989887 1.8202534 2.7900044 1.2341221 1.4323267 1.2228828 1.2262272 #> 11 1.3799029 1.2210804 2.2104139 1.4272643 1.2482246 1.3794947 1.5615544 #> 12 1.5065074 1.4035111 2.4710310 1.3771665 1.3514119 1.4426534 1.7548539 #> 13 1.4777033 1.2213123 2.0421018 1.5941241 1.2728615 1.4757652 1.6173610 #> 14 1.6664067 1.5421312 2.5617738 1.6018197 1.6861799 1.3584400 1.2822114 #> 15 1.4427592 1.1229369 2.1406727 1.3791808 1.2686269 1.1478232 1.4754556 #> 16 1.4327936 1.4111002 2.4645590 1.3333968 1.2160554 1.3709074 1.3885566 #> 17 1.4648136 1.2742107 2.2761069 1.4325438 1.2693468 1.3526787 1.5062059 #> 18 1.5270568 1.4930275 2.3607668 1.6232515 1.3603132 1.5680684 2.0364625 #> 19 1.3928919 1.5892228 2.3596383 1.5310815 1.2051446 1.6146943 1.8975035 #> 20 1.7283923 1.4877085 2.3210077 1.4488521 1.3263064 1.5835656 1.6908042 #>            8         9        10        11        12        13        14 #> 2                                                                        #> 3                                                                        #> 4                                                                        #> 5                                                                        #> 6                                                                        #> 7                                                                        #> 8                                                                        #> 9  1.5010048                                                             #> 10 1.4222375 1.3748589                                                   #> 11 1.4823946 1.9455131 1.4660343                                         #> 12 1.4864470 2.0268137 1.5520215 1.0716433                               #> 13 1.4769877 2.0357477 1.5942977 0.8594279 1.2982404                     #> 14 1.8755046 2.0566363 1.4582723 1.2956923 1.3396139 1.3400074           #> 15 1.5533715 1.9264916 1.5444548 0.8429685 1.0458866 0.7268204 1.2391291 #> 16 1.4852218 1.9958873 1.5289911 0.9200683 1.0118756 1.1940376 1.1871331 #> 17 1.5338335 2.0371814 1.4846165 0.7740232 1.0488428 1.0707331 1.3950533 #> 18 1.5877497 2.1721092 1.7670378 1.1324135 0.9822233 1.3807056 1.6875522 #> 19 1.5269017 2.1036968 1.7910394 1.1033057 1.0519179 1.4021658 1.5831592 #> 20 1.4956007 2.0057310 1.7761849 1.1231756 1.1355052 1.3252517 1.6285054 #>           15        16        17        18        19 #> 2                                                    #> 3                                                    #> 4                                                    #> 5                                                    #> 6                                                    #> 7                                                    #> 8                                                    #> 9                                                    #> 10                                                   #> 11                                                   #> 12                                                   #> 13                                                   #> 14                                                   #> 15                                                   #> 16 1.0022083                                         #> 17 0.8794542 0.6886927                               #> 18 1.1450239 1.3628452 1.1477949                     #> 19 1.2047551 0.8621763 1.0255236 1.2025500           #> 20 1.0938690 1.0275766 0.9739499 1.2014374 1.1457005"},{"path":"https://astamm.github.io/nevada/reference/distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Distances Between Networks — distances","title":"Distances Between Networks — distances","text":"collection functions computing distance two networks.","code":""},{"path":"https://astamm.github.io/nevada/reference/distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distances Between Networks — distances","text":"","code":"dist_hamming(x, y, representation = \"laplacian\")  dist_frobenius(   x,   y,   representation = \"laplacian\",   matching_iterations = 0,   target_matrix = NULL )  dist_spectral(x, y, representation = \"laplacian\")  dist_root_euclidean(x, y, representation = \"laplacian\")"},{"path":"https://astamm.github.io/nevada/reference/distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distances Between Networks — distances","text":"x igraph::igraph object matrix representing underlying network. y igraph::igraph object matrix representing underlying network. number vertices x. representation string specifying desired type representation, among: \"adjacency\", \"laplacian\", \"modularity\" \"graphon\". Default \"laplacian\". matching_iterations integer value specifying maximum number runs looking optimal permutation graph matching. Defaults 0L case matching done. target_matrix square numeric matrix size n equal order graphs specifying target matrix towards initial doubly stochastic matrix shrunk time graph matching algorithm fails provide good minimum. Defaults NULL case target matrix automatically chosen identity matrix uniform matrix n-simplex.","code":""},{"path":"https://astamm.github.io/nevada/reference/distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distances Between Networks — distances","text":"scalar measuring distance two input networks.","code":""},{"path":"https://astamm.github.io/nevada/reference/distances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distances Between Networks — distances","text":"Let \\(X\\) matrix representation network \\(x\\) \\(Y\\) matrix representation network \\(y\\). Hamming distance \\(x\\) \\(y\\) given $$\\frac{1}{N(N-1)} \\sum_{,j} |X_{ij} - Y_{ij}|,$$ \\(N\\) number vertices networks \\(x\\) \\(y\\). Frobenius distance \\(x\\) \\(y\\) given $$\\sqrt{\\sum_{,j} (X_{ij} - Y_{ij})^2}.$$ spectral distance \\(x\\) \\(y\\) given $$\\sqrt{\\sum_i (a_i - b_i)^2},$$ \\(\\) \\(b\\) eigenvalues \\(X\\) \\(Y\\), respectively. distance gives rise classes equivalence. Consider spectral decomposition \\(X\\) \\(Y\\): $$X=VAV^{-1}$$ $$Y = UBU^{-1},$$ \\(V\\) \\(U\\) matrices whose columns eigenvectors \\(X\\) \\(Y\\), respectively \\(\\) \\(B\\) diagonal matrices elements eigenvalues \\(X\\) \\(Y\\), respectively. root-Euclidean distance \\(x\\) \\(y\\) given $$\\sqrt{\\sum_i (V \\sqrt{} V^{-1} - U \\sqrt{B} U^{-1})^2}.$$ Root-Euclidean distance can used laplacian matrix representation.","code":""},{"path":"https://astamm.github.io/nevada/reference/distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distances Between Networks — distances","text":"","code":"g1 <- igraph::sample_gnp(20, 0.1) g2 <- igraph::sample_gnp(20, 0.2) dist_hamming(g1, g2, \"adjacency\") #> [1] 0.2842105 dist_frobenius(g1, g2, \"adjacency\") #> [1] 10.3923 dist_spectral(g1, g2, \"laplacian\") #> [1] 15.99746 dist_root_euclidean(g1, g2, \"laplacian\") #> [1] 10.6597"},{"path":"https://astamm.github.io/nevada/reference/edge_count_global_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform distance matrix in edge properties of minimal spanning tree — edge_count_global_variables","title":"Transform distance matrix in edge properties of minimal spanning tree — edge_count_global_variables","text":"Transform distance matrix edge properties minimal spanning tree","code":""},{"path":"https://astamm.github.io/nevada/reference/edge_count_global_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform distance matrix in edge properties of minimal spanning tree — edge_count_global_variables","text":"","code":"edge_count_global_variables(d, n1, k = 1L)"},{"path":"https://astamm.github.io/nevada/reference/edge_count_global_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform distance matrix in edge properties of minimal spanning tree — edge_count_global_variables","text":"d matrix dimension \\((n1+n2)x(n1+n2)\\) containing distances elements two samples put together. n1 integer giving size first sample. k integer specifying density minimal spanning tree generate.","code":""},{"path":"https://astamm.github.io/nevada/reference/edge_count_global_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform distance matrix in edge properties of minimal spanning tree — edge_count_global_variables","text":"list edge properties minimal spanning tree.","code":""},{"path":"https://astamm.github.io/nevada/reference/edge_count_global_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform distance matrix in edge properties of minimal spanning tree — edge_count_global_variables","text":"","code":"n1 <- 30L n2 <- 10L gnp_params <- list(p = 1/3) k_regular_params <- list(k = 8L) x <- nvd(model = \"gnp\", n = n1, model_params = gnp_params) y <- nvd(model = \"k_regular\", n = n2, model_params = k_regular_params) d <- dist_nvd(x, y, representation = \"laplacian\", distance = \"frobenius\") e <- edge_count_global_variables(d, n1, k = 5L)"},{"path":"https://astamm.github.io/nevada/reference/generate_sigma_algebra.html","id":null,"dir":"Reference","previous_headings":"","what":"Sigma-Algebra generated by a Partition — generate_sigma_algebra","title":"Sigma-Algebra generated by a Partition — generate_sigma_algebra","text":"Sigma-Algebra generated Partition","code":""},{"path":"https://astamm.github.io/nevada/reference/generate_sigma_algebra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sigma-Algebra generated by a Partition — generate_sigma_algebra","text":"","code":"generate_sigma_algebra(x)"},{"path":"https://astamm.github.io/nevada/reference/generate_sigma_algebra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sigma-Algebra generated by a Partition — generate_sigma_algebra","text":"x Input partition stored vertex_partition object.","code":""},{"path":"https://astamm.github.io/nevada/reference/generate_sigma_algebra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sigma-Algebra generated by a Partition — generate_sigma_algebra","text":"Sigma-algebra","code":""},{"path":"https://astamm.github.io/nevada/reference/generate_sigma_algebra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sigma-Algebra generated by a Partition — generate_sigma_algebra","text":"","code":"g <- igraph::make_ring(7) m <- as.integer(c(1, 2, 1, 3, 4, 4, 3)) p <- as_vertex_partition(m) sa <- generate_sigma_algebra(p) all_full  <- purrr::modify_depth(sa, 2, ~ subgraph_full (g, .x)) all_intra <- purrr::modify_depth(sa, 2, ~ subgraph_intra(g, .x)) all_inter <- purrr::modify_depth(sa, 2, ~ subgraph_inter(g, .x))"},{"path":"https://astamm.github.io/nevada/reference/inner-products.html","id":null,"dir":"Reference","previous_headings":"","what":"Inner-Products Between Networks — inner-products","title":"Inner-Products Between Networks — inner-products","text":"collection functions computing inner product two networks.","code":""},{"path":"https://astamm.github.io/nevada/reference/inner-products.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inner-Products Between Networks — inner-products","text":"","code":"ipro_frobenius(x, y, representation = \"laplacian\")"},{"path":"https://astamm.github.io/nevada/reference/inner-products.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inner-Products Between Networks — inner-products","text":"x igraph object matrix representing underlying network. y igraph object matrix representing underlying network. number vertices x. representation string specifying desired type representation, among: \"adjacency\", \"laplacian\", \"modularity\" \"graphon\". Default \"laplacian\".","code":""},{"path":"https://astamm.github.io/nevada/reference/inner-products.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inner-Products Between Networks — inner-products","text":"scalar measuring angle two input networks.","code":""},{"path":"https://astamm.github.io/nevada/reference/inner-products.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inner-Products Between Networks — inner-products","text":"","code":"g1 <- igraph::sample_gnp(20, 0.1) g2 <- igraph::sample_gnp(20, 0.2) ipro_frobenius(g1, g2, \"adjacency\") #> [1] 10"},{"path":"https://astamm.github.io/nevada/reference/mean.nvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Fréchet Mean of Network-Valued Data — mean.nvd","title":"Fréchet Mean of Network-Valued Data — mean.nvd","text":"function computes sample Fréchet mean observed sample network-valued random variables according specified matrix representation. currently supports Euclidean geometry .e. sample Fréchet mean obtained argmin sum squared Frobenius distances.","code":""},{"path":"https://astamm.github.io/nevada/reference/mean.nvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fréchet Mean of Network-Valued Data — mean.nvd","text":"","code":"# S3 method for nvd mean(x, weights = rep(1, length(x)), representation = \"adjacency\", ...)"},{"path":"https://astamm.github.io/nevada/reference/mean.nvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fréchet Mean of Network-Valued Data — mean.nvd","text":"x nvd object. weights numeric vector specifying weights observation (default: equally weighted). representation string specifying graph representation used. Choices adjacency, laplacian, modularity, graphon. Default adjacency. ... argument parsed mean function.","code":""},{"path":"https://astamm.github.io/nevada/reference/mean.nvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fréchet Mean of Network-Valued Data — mean.nvd","text":"mean network chosen matrix representation assuming Euclidean geometry now.","code":""},{"path":"https://astamm.github.io/nevada/reference/mean.nvd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fréchet Mean of Network-Valued Data — mean.nvd","text":"","code":"gnp_params <- list(p = 1/3) x <- nvd(model = \"gnp\", n = 10L, model_params = gnp_params) mean(x) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]  0.0  0.4  0.2  0.5  0.5  0.3  0.4  0.2  0.4   0.5   0.4   0.3   0.4 #>  [2,]  0.4  0.0  0.4  0.2  0.4  0.3  0.3  0.0  0.3   0.5   0.2   0.5   0.5 #>  [3,]  0.2  0.4  0.0  0.4  0.5  0.6  0.4  0.3  0.1   0.4   0.3   0.5   0.2 #>  [4,]  0.5  0.2  0.4  0.0  0.4  0.5  0.1  0.7  0.3   0.3   0.3   0.2   0.3 #>  [5,]  0.5  0.4  0.5  0.4  0.0  0.5  0.3  0.3  0.3   0.3   0.3   0.2   0.4 #>  [6,]  0.3  0.3  0.6  0.5  0.5  0.0  0.1  0.3  0.3   0.4   0.4   0.6   0.3 #>  [7,]  0.4  0.3  0.4  0.1  0.3  0.1  0.0  0.2  0.3   0.1   0.4   0.5   0.2 #>  [8,]  0.2  0.0  0.3  0.7  0.3  0.3  0.2  0.0  0.3   0.1   0.5   0.3   0.4 #>  [9,]  0.4  0.3  0.1  0.3  0.3  0.3  0.3  0.3  0.0   0.4   0.5   0.4   0.2 #> [10,]  0.5  0.5  0.4  0.3  0.3  0.4  0.1  0.1  0.4   0.0   0.3   0.3   0.5 #> [11,]  0.4  0.2  0.3  0.3  0.3  0.4  0.4  0.5  0.5   0.3   0.0   0.2   0.4 #> [12,]  0.3  0.5  0.5  0.2  0.2  0.6  0.5  0.3  0.4   0.3   0.2   0.0   0.2 #> [13,]  0.4  0.5  0.2  0.3  0.4  0.3  0.2  0.4  0.2   0.5   0.4   0.2   0.0 #> [14,]  0.3  0.4  0.2  0.5  0.3  0.4  0.3  0.3  0.4   0.2   0.2   0.3   0.3 #> [15,]  0.6  0.2  0.3  0.3  0.3  0.5  0.3  0.4  0.5   0.7   0.4   0.1   0.4 #> [16,]  0.5  0.2  0.2  0.5  0.3  0.2  0.0  0.4  0.1   0.3   0.2   0.5   0.2 #> [17,]  0.2  0.3  0.3  0.6  0.2  0.3  0.4  0.2  0.4   0.4   0.4   0.1   0.6 #> [18,]  0.5  0.2  0.2  0.4  0.3  0.5  0.1  0.5  0.1   0.6   0.5   0.3   0.4 #> [19,]  0.3  0.3  0.3  0.1  0.3  0.4  0.0  0.4  0.4   0.2   0.5   0.4   0.4 #> [20,]  0.4  0.4  0.2  0.3  0.6  0.3  0.5  0.5  0.6   0.2   0.4   0.5   0.3 #> [21,]  0.4  0.5  0.6  0.3  0.0  0.2  0.6  0.1  0.3   0.0   0.4   0.3   0.3 #> [22,]  0.4  0.3  0.3  0.2  0.3  0.2  0.3  0.5  0.3   0.3   0.5   0.6   0.0 #> [23,]  0.5  0.2  0.3  0.4  0.2  0.6  0.3  0.5  0.3   0.4   0.2   0.3   0.1 #> [24,]  0.2  0.1  0.2  0.6  0.5  0.3  0.5  0.3  0.5   0.3   0.2   0.4   0.1 #> [25,]  0.1  0.6  0.3  0.2  0.4  0.3  0.4  0.3  0.3   0.3   0.4   0.2   0.3 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]   0.3   0.6   0.5   0.2   0.5   0.3   0.4   0.4   0.4   0.5   0.2   0.1 #>  [2,]   0.4   0.2   0.2   0.3   0.2   0.3   0.4   0.5   0.3   0.2   0.1   0.6 #>  [3,]   0.2   0.3   0.2   0.3   0.2   0.3   0.2   0.6   0.3   0.3   0.2   0.3 #>  [4,]   0.5   0.3   0.5   0.6   0.4   0.1   0.3   0.3   0.2   0.4   0.6   0.2 #>  [5,]   0.3   0.3   0.3   0.2   0.3   0.3   0.6   0.0   0.3   0.2   0.5   0.4 #>  [6,]   0.4   0.5   0.2   0.3   0.5   0.4   0.3   0.2   0.2   0.6   0.3   0.3 #>  [7,]   0.3   0.3   0.0   0.4   0.1   0.0   0.5   0.6   0.3   0.3   0.5   0.4 #>  [8,]   0.3   0.4   0.4   0.2   0.5   0.4   0.5   0.1   0.5   0.5   0.3   0.3 #>  [9,]   0.4   0.5   0.1   0.4   0.1   0.4   0.6   0.3   0.3   0.3   0.5   0.3 #> [10,]   0.2   0.7   0.3   0.4   0.6   0.2   0.2   0.0   0.3   0.4   0.3   0.3 #> [11,]   0.2   0.4   0.2   0.4   0.5   0.5   0.4   0.4   0.5   0.2   0.2   0.4 #> [12,]   0.3   0.1   0.5   0.1   0.3   0.4   0.5   0.3   0.6   0.3   0.4   0.2 #> [13,]   0.3   0.4   0.2   0.6   0.4   0.4   0.3   0.3   0.0   0.1   0.1   0.3 #> [14,]   0.0   0.4   0.1   0.2   0.2   0.1   0.2   0.1   0.4   0.4   0.2   0.4 #> [15,]   0.4   0.0   0.2   0.5   0.3   0.5   0.6   0.3   0.3   0.5   0.1   0.2 #> [16,]   0.1   0.2   0.0   0.4   0.5   0.5   0.3   0.5   0.3   0.2   0.4   0.1 #> [17,]   0.2   0.5   0.4   0.0   0.4   0.2   0.1   0.1   0.6   0.5   0.4   0.3 #> [18,]   0.2   0.3   0.5   0.4   0.0   0.3   0.2   0.3   0.4   0.2   0.2   0.3 #> [19,]   0.1   0.5   0.5   0.2   0.3   0.0   0.5   0.4   0.5   0.1   0.4   0.1 #> [20,]   0.2   0.6   0.3   0.1   0.2   0.5   0.0   0.5   0.4   0.2   0.5   0.1 #> [21,]   0.1   0.3   0.5   0.1   0.3   0.4   0.5   0.0   0.4   0.4   0.4   0.4 #> [22,]   0.4   0.3   0.3   0.6   0.4   0.5   0.4   0.4   0.0   0.2   0.1   0.5 #> [23,]   0.4   0.5   0.2   0.5   0.2   0.1   0.2   0.4   0.2   0.0   0.2   0.3 #> [24,]   0.2   0.1   0.4   0.4   0.2   0.4   0.5   0.4   0.1   0.2   0.0   0.3 #> [25,]   0.4   0.2   0.1   0.3   0.3   0.1   0.1   0.4   0.5   0.3   0.3   0.0 #> attr(,\"representation\") #> [1] \"adjacency\""},{"path":"https://astamm.github.io/nevada/reference/nevada-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nevada: Network-Valued Data Analysis — nevada-package","title":"nevada: Network-Valued Data Analysis — nevada-package","text":"flexible statistical framework network-valued data analysis. leverages complexity space distributions graphs using permutation framework inference implemented 'flipr' package. Currently, two-sample testing problem covered generalization k samples regression added future well. 4-step procedure user chooses suitable representation networks, suitable metric embed representation metric space, one test statistics target specific aspects distributions compared formula compute permutation p-value. Two types inference provided: global test answering whether difference distributions generated two samples local test localizing differences network structure. latter assumed shared networks samples. References: Lovato, ., Pini, ., Stamm, ., Vantini, S. (2020) \"Model-free two-sample test network-valued data\" doi:10.1016/j.csda.2019.106896 ; Lovato, ., Pini, ., Stamm, ., Taquet, M., Vantini, S. (2021) \"Multiscale null hypothesis testing network-valued data: Analysis brain networks patients autism\" doi:10.1111/rssc.12463 .","code":""},{"path":[]},{"path":"https://astamm.github.io/nevada/reference/nevada-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nevada: Network-Valued Data Analysis — nevada-package","text":"Maintainer: Aymeric Stamm aymeric.stamm@cnrs.fr (ORCID) Authors: Ilenia Lovato ilenia.lovato01@universitadipavia.Alessia Pini alessia.pini@unicatt.Simone Vantini simone.vantini@polimi.","code":""},{"path":"https://astamm.github.io/nevada/reference/nvd-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"MDS Visualization of Network Distributions — nvd-plot","title":"MDS Visualization of Network Distributions — nvd-plot","text":"function generates 2-dimensional plots samples networks via multi-dimensional scaling using representations distances included package.","code":""},{"path":"https://astamm.github.io/nevada/reference/nvd-plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MDS Visualization of Network Distributions — nvd-plot","text":"","code":"# S3 method for nvd autoplot(object, memberships = rep(1, length(object)), method = \"mds\", ...)  # S3 method for nvd plot(x, method = \"mds\", ...)"},{"path":"https://astamm.github.io/nevada/reference/nvd-plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MDS Visualization of Network Distributions — nvd-plot","text":"object, x list containing two samples network-valued data stored objects class nvd. memberships integer vector specifying membership network specific sample. Defaults rep(1, length(nvd)) assumes networks input nvd object belong single group. method string specifying dimensionality reduction method use projecting samples cartesian plane. Choices \"mds\", \"tsne\" \"umap\". Defaults \"mds\". ... Extra arguments passed plot function.","code":""},{"path":"https://astamm.github.io/nevada/reference/nvd-plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MDS Visualization of Network Distributions — nvd-plot","text":"Invisibly returns ggplot object. particular, data set computed generate plot can retrieved via $data. tibble containing following variables: V1: x-coordinate observation plane, V2: y-coordinate observation plane, Label: sample membership observation, Representation: type matrix representation used manipulate observation, Distance: distance used measure far observation others.","code":""},{"path":"https://astamm.github.io/nevada/reference/nvd-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MDS Visualization of Network Distributions — nvd-plot","text":"","code":"gnp_params <- list(p = 1/3) k_regular_params <- list(k = 8L) x <- nvd(model = \"gnp\", n = 10L, model_params = gnp_params) y <- nvd(model = \"k_regular\", n = 10L, model_params = k_regular_params) mb <- c(rep(1, length(x)), rep(2, length(y))) z <- as_nvd(c(x, y)) ggplot2::autoplot(z, memberships = mb)  plot(z, memberships = mb)"},{"path":"https://astamm.github.io/nevada/reference/nvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Network-Valued Data Constructor — nvd","title":"Network-Valued Data Constructor — nvd","text":"constructor objects class nvd.","code":""},{"path":"https://astamm.github.io/nevada/reference/nvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network-Valued Data Constructor — nvd","text":"","code":"nvd(   model = \"smallworld\",   n = 1L,   num_vertices = 25L,   model_params = list(dim = 1L, nei = 4L, p = 0.15),   seed = 1234 )"},{"path":"https://astamm.github.io/nevada/reference/nvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network-Valued Data Constructor — nvd","text":"model string specifying model used sampling networks (current choices : \"sbm\", \"k_regular\", \"gnp\", \"smallworld\", \"pa\", \"poisson\" \"binomial\"). Defaults \"smallworld\". n integer specifying sample size. Defaults 1L. num_vertices integer specifying order graphs generated (.e. number nodes). Defaults 25L. model_params named list setting parameters model considering. Defaults list(dim = 1L, nei = 4L, p = 0.15) sets defaults parameters Watts-Strogatz small-world model generator. seed integer specifying random generator seed. Defaults 1234.","code":""},{"path":"https://astamm.github.io/nevada/reference/nvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network-Valued Data Constructor — nvd","text":"nvd object list igraph objects.","code":""},{"path":"https://astamm.github.io/nevada/reference/nvd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network-Valued Data Constructor — nvd","text":"","code":"smallworld_params <- list(dim = 1L, nei = 4L, p = 0.15) nvd(model_params = smallworld_params) #> [[1]] #> IGRAPH 3c409da U--- 25 100 -- Watts-Strogatz random graph #> + attr: name (g/c), dim (g/n), size (g/n), nei (g/n), p (g/n), loops #> | (g/l), multiple (g/l) #> + edges from 3c409da: #>  [1]  1-- 2  2-- 3  4--13  4-- 5  5-- 6  6-- 7  7--17  8-- 9 10--19 10--11 #> [11]  1--11 12--13 13--14 14--15 15--16 16--17 17--18 18--19 19--20  2--21 #> [21] 21--22 22--23 20--23 24--25  1--25  1-- 3  1--24  1-- 4  1--23  1-- 5 #> [31]  1--22  2--25  2-- 4  2--24  2-- 5  2--23  2-- 6  5--19  3--25  3-- 6 #> [41]  3--24  3--16  4-- 6  4-- 7  4--25  4-- 8  5-- 7  5-- 8  5-- 9  8--13 #> [51]  6-- 9  6--10  7-- 9  7--10  7--11  8--10  8--11  8--23  9--11  9--12 #> [61]  9--13 10--12 10--13  5--10 11--13 11--14  6--15 12--14 12--15 12--16 #> + ... omitted several edges #>  #> attr(,\"class\") #> [1] \"nvd\"  \"list\""},{"path":"https://astamm.github.io/nevada/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://astamm.github.io/nevada/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://astamm.github.io/nevada/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://astamm.github.io/nevada/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://astamm.github.io/nevada/reference/power2.html","id":null,"dir":"Reference","previous_headings":"","what":"Power Simulations for Permutation Tests — power2","title":"Power Simulations for Permutation Tests — power2","text":"function provides Monte-Carlo estimate power permutation tests proposed package.","code":""},{"path":"https://astamm.github.io/nevada/reference/power2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power Simulations for Permutation Tests — power2","text":"","code":"power2(   model1 = \"gnp\",   model2 = \"k_regular\",   n1 = 20L,   n2 = 20L,   num_vertices = 25L,   model1_params = NULL,   model2_params = NULL,   representation = \"adjacency\",   distance = \"frobenius\",   stats = c(\"flipr:t_ip\", \"flipr:f_ip\"),   B = 1000L,   alpha = 0.05,   test = \"exact\",   k = 5L,   R = 1000L,   seed = 1234 )"},{"path":"https://astamm.github.io/nevada/reference/power2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power Simulations for Permutation Tests — power2","text":"model1 string specifying model used generating first sample. Choices \"sbm\", \"k_regular\", \"gnp\", \"smallworld\", \"pa\", \"poisson\" \"binomial\". Defaults \"gnp\". model2 string specifying model used generating second sample. Choices \"sbm\", \"k_regular\", \"gnp\", \"smallworld\", \"pa\", \"poisson\" \"binomial\". Defaults \"k_regular\". n1 size first sample. Defaults 20L. n2 size second sample. Defaults 20L. num_vertices number nodes generated graphs. Defaults 25L. model1_params named list setting parameters first chosen model. Defaults list(p = 1/3). model2_params named list setting parameters second chosen model. Defaults list(k = 8L). representation string specifying desired type representation, among: \"adjacency\", \"laplacian\" \"modularity\". Defaults \"adjacency\". distance string specifying chosen distance calculating test statistic, among: \"hamming\", \"frobenius\", \"spectral\" \"root-euclidean\". Defaults \"frobenius\". stats character vector specifying chosen test statistic(s), among: \"original_edge_count\", \"generalized_edge_count\", \"weighted_edge_count\", \"student_euclidean\", \"welch_euclidean\" statistics based inter-point distances available flipr package: \"flipr:student_ip\", \"flipr:fisher_ip\", \"flipr:bg_ip\", \"flipr:energy_ip\", \"flipr:cq_ip\". Defaults c(\"flipr:student_ip\", \"flipr:fisher_ip\"). B number permutation tolerance. number lower 1, intended tolerance. Otherwise, intended number required permutations. Defaults 1000L. alpha Significance level hypothesis testing. Defaults 0.05. test character string specifying formula used compute permutation p-value. Choices \"estimate\", \"upper_bound\" \"exact\". Defaults \"exact\" provides exact tests. k integer specifying density minimum spanning tree used edge count statistics. Defaults 5L. R Number Monte-Carlo trials used estimate power. Defaults 1000L. seed integer specifying random generator seed. Defaults `1234.","code":""},{"path":"https://astamm.github.io/nevada/reference/power2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power Simulations for Permutation Tests — power2","text":"numeric value estimating power test.","code":""},{"path":"https://astamm.github.io/nevada/reference/power2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power Simulations for Permutation Tests — power2","text":"Currently, six scenarios pairs populations implemented. Scenario 0 allows make sure permutation tests exact.","code":""},{"path":"https://astamm.github.io/nevada/reference/power2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power Simulations for Permutation Tests — power2","text":"","code":"gnp_params <- list(p = 1/3) k_regular_params <- list(k = 8L) power2(   model1_params = gnp_params,   model2_params = k_regular_params,   R = 10,   B = 100,   seed = 1234 ) #> [1] 0.1"},{"path":"https://astamm.github.io/nevada/reference/repr_nvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Network-Valued to Matrix-Valued Data — repr_nvd","title":"Network-Valued to Matrix-Valued Data — repr_nvd","text":"Network-Valued Matrix-Valued Data","code":""},{"path":"https://astamm.github.io/nevada/reference/repr_nvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network-Valued to Matrix-Valued Data — repr_nvd","text":"","code":"repr_nvd(x, y = NULL, representation = \"adjacency\")"},{"path":"https://astamm.github.io/nevada/reference/repr_nvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network-Valued to Matrix-Valued Data — repr_nvd","text":"x nvd object. y nvd object. NULL (default), taken account. representation string specifying requested matrix representation. Choices : \"adjacency\", \"laplacian\" \"modularity\". Default \"adjacency\".","code":""},{"path":"https://astamm.github.io/nevada/reference/repr_nvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network-Valued to Matrix-Valued Data — repr_nvd","text":"list matrices.","code":""},{"path":"https://astamm.github.io/nevada/reference/repr_nvd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network-Valued to Matrix-Valued Data — repr_nvd","text":"","code":"gnp_params <- list(p = 1/3) x <- nvd(model = \"gnp\", n = 10L, model_params = gnp_params) xm <- repr_nvd(x)"},{"path":"https://astamm.github.io/nevada/reference/representations.html","id":null,"dir":"Reference","previous_headings":"","what":"Network Representation Functions — representations","title":"Network Representation Functions — representations","text":"collection functions convert graph stored igraph object desired matrix representation among adjacency matrix, graph laplacian, modularity matrix graphon (edge probability matrix).","code":""},{"path":"https://astamm.github.io/nevada/reference/representations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network Representation Functions — representations","text":"","code":"repr_adjacency(network, validate = TRUE)  repr_laplacian(network, validate = TRUE)  repr_modularity(network, validate = TRUE)  repr_graphon(network, validate = TRUE)"},{"path":"https://astamm.github.io/nevada/reference/representations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network Representation Functions — representations","text":"network igraph object. validate boolean specifying whether function check class input (default: TRUE).","code":""},{"path":"https://astamm.github.io/nevada/reference/representations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network Representation Functions — representations","text":"numeric square matrix giving desired network representation recorded object's class.","code":""},{"path":"https://astamm.github.io/nevada/reference/representations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network Representation Functions — representations","text":"","code":"g <- igraph::sample_smallworld(1, 25, 3, 0.05) repr_adjacency(g) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    0    1    1    1    0    0    0    0    0     0     0     0     0 #>  [2,]    1    0    1    1    1    0    0    0    0     0     0     0     0 #>  [3,]    1    1    0    0    1    1    0    0    0     0     0     0     0 #>  [4,]    1    1    0    0    1    1    1    0    0     0     0     0     0 #>  [5,]    0    1    1    1    0    1    1    1    0     0     0     0     0 #>  [6,]    0    0    1    1    1    0    1    1    0     0     0     1     0 #>  [7,]    0    0    0    1    1    1    0    0    1     1     0     0     0 #>  [8,]    0    0    0    0    1    1    0    0    1     1     1     1     0 #>  [9,]    0    0    0    0    0    0    1    1    0     1     1     1     0 #> [10,]    0    0    0    0    0    0    1    1    1     0     1     1     1 #> [11,]    0    0    0    0    0    0    0    1    1     1     0     1     1 #> [12,]    0    0    0    0    0    1    0    1    1     1     1     0     1 #> [13,]    0    0    0    0    0    0    0    0    0     1     1     1     0 #> [14,]    0    0    0    1    0    0    0    0    0     0     1     0     1 #> [15,]    0    0    0    0    0    0    0    0    0     0     0     1     1 #> [16,]    0    0    0    0    0    0    0    0    0     0     0     0     1 #> [17,]    0    1    0    0    0    0    0    0    0     0     0     0     0 #> [18,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [19,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [20,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [21,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [22,]    0    0    0    1    0    0    0    0    0     0     0     0     0 #> [23,]    1    0    0    0    0    0    0    0    0     0     0     0     0 #> [24,]    1    1    0    0    0    0    0    0    0     0     0     0     0 #> [25,]    1    1    1    0    0    0    0    0    0     0     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]     0     0     0     0     0     0     0     0     0     1     1     1 #>  [2,]     0     0     0     1     0     0     0     0     0     0     1     1 #>  [3,]     0     0     0     0     0     0     0     0     0     0     0     1 #>  [4,]     1     0     0     0     0     0     0     0     1     0     0     0 #>  [5,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [6,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [7,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [8,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [9,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [10,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [11,]     1     0     0     0     0     0     0     0     0     0     0     0 #> [12,]     0     1     0     0     0     0     0     0     0     0     0     0 #> [13,]     1     1     1     0     0     0     0     0     0     0     0     0 #> [14,]     0     1     1     1     0     0     0     0     0     0     0     0 #> [15,]     1     0     1     1     1     0     0     0     0     0     0     0 #> [16,]     1     1     0     1     1     1     0     0     0     0     0     0 #> [17,]     1     1     1     0     0     1     1     0     0     0     0     0 #> [18,]     0     1     1     0     0     1     1     1     0     0     0     0 #> [19,]     0     0     1     1     1     0     1     1     1     0     0     0 #> [20,]     0     0     0     1     1     1     0     1     1     1     0     0 #> [21,]     0     0     0     0     1     1     1     0     1     1     1     0 #> [22,]     0     0     0     0     0     1     1     1     0     1     1     1 #> [23,]     0     0     0     0     0     0     1     1     1     0     1     1 #> [24,]     0     0     0     0     0     0     0     1     1     1     0     1 #> [25,]     0     0     0     0     0     0     0     0     1     1     1     0 #> attr(,\"representation\") #> [1] \"adjacency\" repr_laplacian(g) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    6   -1   -1   -1    0    0    0    0    0     0     0     0     0 #>  [2,]   -1    7   -1   -1   -1    0    0    0    0     0     0     0     0 #>  [3,]   -1   -1    5    0   -1   -1    0    0    0     0     0     0     0 #>  [4,]   -1   -1    0    7   -1   -1   -1    0    0     0     0     0     0 #>  [5,]    0   -1   -1   -1    6   -1   -1   -1    0     0     0     0     0 #>  [6,]    0    0   -1   -1   -1    6   -1   -1    0     0     0    -1     0 #>  [7,]    0    0    0   -1   -1   -1    5    0   -1    -1     0     0     0 #>  [8,]    0    0    0    0   -1   -1    0    6   -1    -1    -1    -1     0 #>  [9,]    0    0    0    0    0    0   -1   -1    5    -1    -1    -1     0 #> [10,]    0    0    0    0    0    0   -1   -1   -1     6    -1    -1    -1 #> [11,]    0    0    0    0    0    0    0   -1   -1    -1     6    -1    -1 #> [12,]    0    0    0    0    0   -1    0   -1   -1    -1    -1     7    -1 #> [13,]    0    0    0    0    0    0    0    0    0    -1    -1    -1     6 #> [14,]    0    0    0   -1    0    0    0    0    0     0    -1     0    -1 #> [15,]    0    0    0    0    0    0    0    0    0     0     0    -1    -1 #> [16,]    0    0    0    0    0    0    0    0    0     0     0     0    -1 #> [17,]    0   -1    0    0    0    0    0    0    0     0     0     0     0 #> [18,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [19,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [20,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [21,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [22,]    0    0    0   -1    0    0    0    0    0     0     0     0     0 #> [23,]   -1    0    0    0    0    0    0    0    0     0     0     0     0 #> [24,]   -1   -1    0    0    0    0    0    0    0     0     0     0     0 #> [25,]   -1   -1   -1    0    0    0    0    0    0     0     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]     0     0     0     0     0     0     0     0     0    -1    -1    -1 #>  [2,]     0     0     0    -1     0     0     0     0     0     0    -1    -1 #>  [3,]     0     0     0     0     0     0     0     0     0     0     0    -1 #>  [4,]    -1     0     0     0     0     0     0     0    -1     0     0     0 #>  [5,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [6,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [7,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [8,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [9,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [10,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [11,]    -1     0     0     0     0     0     0     0     0     0     0     0 #> [12,]     0    -1     0     0     0     0     0     0     0     0     0     0 #> [13,]    -1    -1    -1     0     0     0     0     0     0     0     0     0 #> [14,]     6    -1    -1    -1     0     0     0     0     0     0     0     0 #> [15,]    -1     6    -1    -1    -1     0     0     0     0     0     0     0 #> [16,]    -1    -1     6    -1    -1    -1     0     0     0     0     0     0 #> [17,]    -1    -1    -1     6     0    -1    -1     0     0     0     0     0 #> [18,]     0    -1    -1     0     5    -1    -1    -1     0     0     0     0 #> [19,]     0     0    -1    -1    -1     6    -1    -1    -1     0     0     0 #> [20,]     0     0     0    -1    -1    -1     6    -1    -1    -1     0     0 #> [21,]     0     0     0     0    -1    -1    -1     6    -1    -1    -1     0 #> [22,]     0     0     0     0     0    -1    -1    -1     7    -1    -1    -1 #> [23,]     0     0     0     0     0     0    -1    -1    -1     6    -1    -1 #> [24,]     0     0     0     0     0     0     0    -1    -1    -1     6    -1 #> [25,]     0     0     0     0     0     0     0     0    -1    -1    -1     6 #> attr(,\"representation\") #> [1] \"laplacian\" repr_modularity(g) #>        [,1]       [,2]       [,3]       [,4]  [,5]  [,6]       [,7]  [,8] #>  [1,] -0.24  0.7200000  0.8000000  0.7200000 -0.24 -0.24 -0.2000000 -0.24 #>  [2,]  0.72 -0.3266667  0.7666667  0.6733333  0.72 -0.28 -0.2333333 -0.28 #>  [3,]  0.80  0.7666667 -0.1666667 -0.2333333  0.80  0.80 -0.1666667 -0.20 #>  [4,]  0.72  0.6733333 -0.2333333 -0.3266667  0.72  0.72  0.7666667 -0.28 #>  [5,] -0.24  0.7200000  0.8000000  0.7200000 -0.24  0.76  0.8000000  0.76 #>  [6,] -0.24 -0.2800000  0.8000000  0.7200000  0.76 -0.24  0.8000000  0.76 #>  [7,] -0.20 -0.2333333 -0.1666667  0.7666667  0.80  0.80 -0.1666667 -0.20 #>  [8,] -0.24 -0.2800000 -0.2000000 -0.2800000  0.76  0.76 -0.2000000 -0.24 #>  [9,] -0.20 -0.2333333 -0.1666667 -0.2333333 -0.20 -0.20  0.8333333  0.80 #> [10,] -0.24 -0.2800000 -0.2000000 -0.2800000 -0.24 -0.24  0.8000000  0.76 #> [11,] -0.24 -0.2800000 -0.2000000 -0.2800000 -0.24 -0.24 -0.2000000  0.76 #> [12,] -0.28 -0.3266667 -0.2333333 -0.3266667 -0.28  0.72 -0.2333333  0.72 #> [13,] -0.24 -0.2800000 -0.2000000 -0.2800000 -0.24 -0.24 -0.2000000 -0.24 #> [14,] -0.24 -0.2800000 -0.2000000  0.7200000 -0.24 -0.24 -0.2000000 -0.24 #> [15,] -0.24 -0.2800000 -0.2000000 -0.2800000 -0.24 -0.24 -0.2000000 -0.24 #> [16,] -0.24 -0.2800000 -0.2000000 -0.2800000 -0.24 -0.24 -0.2000000 -0.24 #> [17,] -0.24  0.7200000 -0.2000000 -0.2800000 -0.24 -0.24 -0.2000000 -0.24 #> [18,] -0.20 -0.2333333 -0.1666667 -0.2333333 -0.20 -0.20 -0.1666667 -0.20 #> [19,] -0.24 -0.2800000 -0.2000000 -0.2800000 -0.24 -0.24 -0.2000000 -0.24 #> [20,] -0.24 -0.2800000 -0.2000000 -0.2800000 -0.24 -0.24 -0.2000000 -0.24 #> [21,] -0.24 -0.2800000 -0.2000000 -0.2800000 -0.24 -0.24 -0.2000000 -0.24 #> [22,] -0.28 -0.3266667 -0.2333333  0.6733333 -0.28 -0.28 -0.2333333 -0.28 #> [23,]  0.76 -0.2800000 -0.2000000 -0.2800000 -0.24 -0.24 -0.2000000 -0.24 #> [24,]  0.76  0.7200000 -0.2000000 -0.2800000 -0.24 -0.24 -0.2000000 -0.24 #> [25,]  0.76  0.7200000  0.8000000 -0.2800000 -0.24 -0.24 -0.2000000 -0.24 #>             [,9] [,10] [,11]      [,12] [,13] [,14] [,15] [,16] [,17] #>  [1,] -0.2000000 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 -0.24 -0.24 #>  [2,] -0.2333333 -0.28 -0.28 -0.3266667 -0.28 -0.28 -0.28 -0.28  0.72 #>  [3,] -0.1666667 -0.20 -0.20 -0.2333333 -0.20 -0.20 -0.20 -0.20 -0.20 #>  [4,] -0.2333333 -0.28 -0.28 -0.3266667 -0.28  0.72 -0.28 -0.28 -0.28 #>  [5,] -0.2000000 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 -0.24 -0.24 #>  [6,] -0.2000000 -0.24 -0.24  0.7200000 -0.24 -0.24 -0.24 -0.24 -0.24 #>  [7,]  0.8333333  0.80 -0.20 -0.2333333 -0.20 -0.20 -0.20 -0.20 -0.20 #>  [8,]  0.8000000  0.76  0.76  0.7200000 -0.24 -0.24 -0.24 -0.24 -0.24 #>  [9,] -0.1666667  0.80  0.80  0.7666667 -0.20 -0.20 -0.20 -0.20 -0.20 #> [10,]  0.8000000 -0.24  0.76  0.7200000  0.76 -0.24 -0.24 -0.24 -0.24 #> [11,]  0.8000000  0.76 -0.24  0.7200000  0.76  0.76 -0.24 -0.24 -0.24 #> [12,]  0.7666667  0.72  0.72 -0.3266667  0.72 -0.28  0.72 -0.28 -0.28 #> [13,] -0.2000000  0.76  0.76  0.7200000 -0.24  0.76  0.76  0.76 -0.24 #> [14,] -0.2000000 -0.24  0.76 -0.2800000  0.76 -0.24  0.76  0.76  0.76 #> [15,] -0.2000000 -0.24 -0.24  0.7200000  0.76  0.76 -0.24  0.76  0.76 #> [16,] -0.2000000 -0.24 -0.24 -0.2800000  0.76  0.76  0.76 -0.24  0.76 #> [17,] -0.2000000 -0.24 -0.24 -0.2800000 -0.24  0.76  0.76  0.76 -0.24 #> [18,] -0.1666667 -0.20 -0.20 -0.2333333 -0.20 -0.20  0.80  0.80 -0.20 #> [19,] -0.2000000 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24  0.76  0.76 #> [20,] -0.2000000 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 -0.24  0.76 #> [21,] -0.2000000 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 -0.24 -0.24 #> [22,] -0.2333333 -0.28 -0.28 -0.3266667 -0.28 -0.28 -0.28 -0.28 -0.28 #> [23,] -0.2000000 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 -0.24 -0.24 #> [24,] -0.2000000 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 -0.24 -0.24 #> [25,] -0.2000000 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 -0.24 -0.24 #>            [,18] [,19] [,20] [,21]      [,22] [,23] [,24] [,25] #>  [1,] -0.2000000 -0.24 -0.24 -0.24 -0.2800000  0.76  0.76  0.76 #>  [2,] -0.2333333 -0.28 -0.28 -0.28 -0.3266667 -0.28  0.72  0.72 #>  [3,] -0.1666667 -0.20 -0.20 -0.20 -0.2333333 -0.20 -0.20  0.80 #>  [4,] -0.2333333 -0.28 -0.28 -0.28  0.6733333 -0.28 -0.28 -0.28 #>  [5,] -0.2000000 -0.24 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 #>  [6,] -0.2000000 -0.24 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 #>  [7,] -0.1666667 -0.20 -0.20 -0.20 -0.2333333 -0.20 -0.20 -0.20 #>  [8,] -0.2000000 -0.24 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 #>  [9,] -0.1666667 -0.20 -0.20 -0.20 -0.2333333 -0.20 -0.20 -0.20 #> [10,] -0.2000000 -0.24 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 #> [11,] -0.2000000 -0.24 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 #> [12,] -0.2333333 -0.28 -0.28 -0.28 -0.3266667 -0.28 -0.28 -0.28 #> [13,] -0.2000000 -0.24 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 #> [14,] -0.2000000 -0.24 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 #> [15,]  0.8000000 -0.24 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 #> [16,]  0.8000000  0.76 -0.24 -0.24 -0.2800000 -0.24 -0.24 -0.24 #> [17,] -0.2000000  0.76  0.76 -0.24 -0.2800000 -0.24 -0.24 -0.24 #> [18,] -0.1666667  0.80  0.80  0.80 -0.2333333 -0.20 -0.20 -0.20 #> [19,]  0.8000000 -0.24  0.76  0.76  0.7200000 -0.24 -0.24 -0.24 #> [20,]  0.8000000  0.76 -0.24  0.76  0.7200000  0.76 -0.24 -0.24 #> [21,]  0.8000000  0.76  0.76 -0.24  0.7200000  0.76  0.76 -0.24 #> [22,] -0.2333333  0.72  0.72  0.72 -0.3266667  0.72  0.72  0.72 #> [23,] -0.2000000 -0.24  0.76  0.76  0.7200000 -0.24  0.76  0.76 #> [24,] -0.2000000 -0.24 -0.24  0.76  0.7200000  0.76 -0.24  0.76 #> [25,] -0.2000000 -0.24 -0.24 -0.24  0.7200000  0.76  0.76 -0.24 #> attr(,\"representation\") #> [1] \"modularity\" repr_graphon(g) #>             [,1]       [,2]       [,3]       [,4]       [,5]       [,6] #>  [1,] 0.50000000 0.61904762 0.61111111 0.73333333 0.25000000 0.13888889 #>  [2,] 0.61904762 0.42857143 0.61904762 0.78571429 0.49206349 0.18253968 #>  [3,] 0.61111111 0.61904762 0.33333333 0.36666667 0.44444444 0.50000000 #>  [4,] 0.73333333 0.78571429 0.36666667 0.20000000 0.42222222 0.57777778 #>  [5,] 0.25000000 0.49206349 0.44444444 0.42222222 0.44444444 0.44444444 #>  [6,] 0.13888889 0.18253968 0.50000000 0.57777778 0.44444444 0.33333333 #>  [7,] 0.14583333 0.19642857 0.23611111 0.38750000 0.52777778 0.53472222 #>  [8,] 0.13888889 0.12698413 0.11111111 0.21111111 0.44444444 0.50000000 #>  [9,] 0.00000000 0.05555556 0.22222222 0.16666667 0.27777778 0.44444444 #> [10,] 0.00000000 0.00000000 0.19444444 0.08333333 0.27777778 0.38888889 #> [11,] 0.00000000 0.00000000 0.05555556 0.00000000 0.18253968 0.30952381 #> [12,] 0.00000000 0.07142857 0.05555556 0.12500000 0.29166667 0.46527778 #> [13,] 0.00000000 0.07142857 0.00000000 0.07142857 0.12698413 0.18253968 #> [14,] 0.00000000 0.05555556 0.05555556 0.15555556 0.05555556 0.11111111 #> [15,] 0.00000000 0.05555556 0.00000000 0.05555556 0.00000000 0.00000000 #> [16,] 0.00000000 0.10000000 0.00000000 0.10000000 0.00000000 0.00000000 #> [17,] 0.08333333 0.13392857 0.00000000 0.06250000 0.00000000 0.05555556 #> [18,] 0.05555556 0.05555556 0.00000000 0.05555556 0.00000000 0.00000000 #> [19,] 0.16666667 0.07142857 0.00000000 0.00000000 0.00000000 0.00000000 #> [20,] 0.25000000 0.25396825 0.11111111 0.00000000 0.00000000 0.00000000 #> [21,] 0.33333333 0.22619048 0.19444444 0.18333333 0.00000000 0.00000000 #> [22,] 0.35416667 0.26785714 0.34722222 0.48750000 0.17361111 0.00000000 #> [23,] 0.58333333 0.38095238 0.25000000 0.28333333 0.11111111 0.05555556 #> [24,] 0.58333333 0.60714286 0.29166667 0.16250000 0.17361111 0.17361111 #> [25,] 0.58333333 0.66964286 0.40972222 0.32500000 0.17361111 0.23611111 #>            [,7]       [,8]       [,9]      [,10]      [,11]      [,12] #>  [1,] 0.1458333 0.13888889 0.00000000 0.00000000 0.00000000 0.00000000 #>  [2,] 0.1964286 0.12698413 0.05555556 0.00000000 0.00000000 0.07142857 #>  [3,] 0.2361111 0.11111111 0.22222222 0.19444444 0.05555556 0.05555556 #>  [4,] 0.3875000 0.21111111 0.16666667 0.08333333 0.00000000 0.12500000 #>  [5,] 0.5277778 0.44444444 0.27777778 0.27777778 0.18253968 0.29166667 #>  [6,] 0.5347222 0.50000000 0.44444444 0.38888889 0.30952381 0.46527778 #>  [7,] 0.3750000 0.47916667 0.47222222 0.56250000 0.33035714 0.37500000 #>  [8,] 0.4791667 0.55555556 0.61111111 0.75000000 0.56349206 0.58333333 #>  [9,] 0.4722222 0.61111111 0.55555556 0.66666667 0.56349206 0.64583333 #> [10,] 0.5625000 0.75000000 0.66666667 0.66666667 0.69047619 0.79166667 #> [11,] 0.3303571 0.56349206 0.56349206 0.69047619 0.71428571 0.80357143 #> [12,] 0.3750000 0.58333333 0.64583333 0.79166667 0.80357143 0.62500000 #> [13,] 0.1964286 0.30952381 0.30952381 0.53571429 0.57142857 0.60714286 #> [14,] 0.1180556 0.22222222 0.22222222 0.19444444 0.43650794 0.29166667 #> [15,] 0.1180556 0.22222222 0.22222222 0.19444444 0.30952381 0.40972222 #> [16,] 0.0000000 0.05555556 0.05555556 0.00000000 0.24285714 0.22500000 #> [17,] 0.0000000 0.00000000 0.00000000 0.06250000 0.19642857 0.18750000 #> [18,] 0.0000000 0.00000000 0.00000000 0.05555556 0.18253968 0.05555556 #> [19,] 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 0.08333333 #> [20,] 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 0.05555556 #> [21,] 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #> [22,] 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #> [23,] 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #> [24,] 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #> [25,] 0.1250000 0.11805556 0.00000000 0.00000000 0.00000000 0.00000000 #>            [,13]      [,14]      [,15]      [,16]      [,17]      [,18] #>  [1,] 0.00000000 0.00000000 0.00000000 0.00000000 0.08333333 0.05555556 #>  [2,] 0.07142857 0.05555556 0.05555556 0.10000000 0.13392857 0.05555556 #>  [3,] 0.00000000 0.05555556 0.00000000 0.00000000 0.00000000 0.00000000 #>  [4,] 0.07142857 0.15555556 0.05555556 0.10000000 0.06250000 0.05555556 #>  [5,] 0.12698413 0.05555556 0.00000000 0.00000000 0.00000000 0.00000000 #>  [6,] 0.18253968 0.11111111 0.00000000 0.00000000 0.05555556 0.00000000 #>  [7,] 0.19642857 0.11805556 0.11805556 0.00000000 0.00000000 0.00000000 #>  [8,] 0.30952381 0.22222222 0.22222222 0.05555556 0.00000000 0.00000000 #>  [9,] 0.30952381 0.22222222 0.22222222 0.05555556 0.00000000 0.00000000 #> [10,] 0.53571429 0.19444444 0.19444444 0.00000000 0.06250000 0.05555556 #> [11,] 0.57142857 0.43650794 0.30952381 0.24285714 0.19642857 0.18253968 #> [12,] 0.60714286 0.29166667 0.40972222 0.22500000 0.18750000 0.05555556 #> [13,] 0.42857143 0.56349206 0.49206349 0.58571429 0.33035714 0.18253968 #> [14,] 0.56349206 0.44444444 0.61111111 0.63333333 0.47222222 0.33333333 #> [15,] 0.49206349 0.61111111 0.44444444 0.57777778 0.59027778 0.50000000 #> [16,] 0.58571429 0.63333333 0.57777778 0.60000000 0.77500000 0.57777778 #> [17,] 0.33035714 0.47222222 0.59027778 0.77500000 0.50000000 0.47222222 #> [18,] 0.18253968 0.33333333 0.50000000 0.57777778 0.47222222 0.44444444 #> [19,] 0.15476190 0.25000000 0.25000000 0.55000000 0.50000000 0.61111111 #> [20,] 0.18253968 0.27777778 0.22222222 0.26666667 0.47222222 0.55555556 #> [21,] 0.00000000 0.11111111 0.11111111 0.18333333 0.29166667 0.47222222 #> [22,] 0.00000000 0.05555556 0.17361111 0.16250000 0.25000000 0.34722222 #> [23,] 0.00000000 0.00000000 0.05555556 0.18333333 0.14583333 0.27777778 #> [24,] 0.00000000 0.00000000 0.00000000 0.06250000 0.18750000 0.29861111 #> [25,] 0.00000000 0.00000000 0.00000000 0.00000000 0.06250000 0.18055556 #>            [,19]      [,20]     [,21]      [,22]      [,23]     [,24]     [,25] #>  [1,] 0.16666667 0.25000000 0.3333333 0.35416667 0.58333333 0.5833333 0.5833333 #>  [2,] 0.07142857 0.25396825 0.2261905 0.26785714 0.38095238 0.6071429 0.6696429 #>  [3,] 0.00000000 0.11111111 0.1944444 0.34722222 0.25000000 0.2916667 0.4097222 #>  [4,] 0.00000000 0.00000000 0.1833333 0.48750000 0.28333333 0.1625000 0.3250000 #>  [5,] 0.00000000 0.00000000 0.0000000 0.17361111 0.11111111 0.1736111 0.1736111 #>  [6,] 0.00000000 0.00000000 0.0000000 0.00000000 0.05555556 0.1736111 0.2361111 #>  [7,] 0.00000000 0.00000000 0.0000000 0.00000000 0.00000000 0.0000000 0.1250000 #>  [8,] 0.00000000 0.00000000 0.0000000 0.00000000 0.00000000 0.0000000 0.1180556 #>  [9,] 0.00000000 0.00000000 0.0000000 0.00000000 0.00000000 0.0000000 0.0000000 #> [10,] 0.00000000 0.00000000 0.0000000 0.00000000 0.00000000 0.0000000 0.0000000 #> [11,] 0.00000000 0.00000000 0.0000000 0.00000000 0.00000000 0.0000000 0.0000000 #> [12,] 0.08333333 0.05555556 0.0000000 0.00000000 0.00000000 0.0000000 0.0000000 #> [13,] 0.15476190 0.18253968 0.0000000 0.00000000 0.00000000 0.0000000 0.0000000 #> [14,] 0.25000000 0.27777778 0.1111111 0.05555556 0.00000000 0.0000000 0.0000000 #> [15,] 0.25000000 0.22222222 0.1111111 0.17361111 0.05555556 0.0000000 0.0000000 #> [16,] 0.55000000 0.26666667 0.1833333 0.16250000 0.18333333 0.0625000 0.0000000 #> [17,] 0.50000000 0.47222222 0.2916667 0.25000000 0.14583333 0.1875000 0.0625000 #> [18,] 0.61111111 0.55555556 0.4722222 0.34722222 0.27777778 0.2986111 0.1805556 #> [19,] 0.50000000 0.55555556 0.5833333 0.58333333 0.33333333 0.2916667 0.2083333 #> [20,] 0.55555556 0.44444444 0.6111111 0.58333333 0.55555556 0.3541667 0.2361111 #> [21,] 0.58333333 0.61111111 0.6666667 0.72916667 0.66666667 0.5833333 0.3541667 #> [22,] 0.58333333 0.58333333 0.7291667 0.50000000 0.72916667 0.6875000 0.6250000 #> [23,] 0.33333333 0.55555556 0.6666667 0.72916667 0.66666667 0.6458333 0.5625000 #> [24,] 0.29166667 0.35416667 0.5833333 0.68750000 0.64583333 0.5000000 0.5000000 #> [25,] 0.20833333 0.23611111 0.3541667 0.62500000 0.56250000 0.5000000 0.5000000 #> attr(,\"representation\") #> [1] \"graphon\""},{"path":"https://astamm.github.io/nevada/reference/sample2_sbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-Sample Stochastic Block Model Generator — sample2_sbm","title":"Two-Sample Stochastic Block Model Generator — sample2_sbm","text":"function generates two samples networks according stochastic block model (SBM). essentially wrapper around sample_sbm allows sample single network SBM.","code":""},{"path":"https://astamm.github.io/nevada/reference/sample2_sbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-Sample Stochastic Block Model Generator — sample2_sbm","text":"","code":"sample2_sbm(n, nv, p1, b1, p2 = p1, b2 = b1, seed = NULL)"},{"path":"https://astamm.github.io/nevada/reference/sample2_sbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-Sample Stochastic Block Model Generator — sample2_sbm","text":"n Integer scalar giving sample size. nv Integer scalar giving number vertices generated networks, common networks samples. p1 matrix giving Bernoulli rates 1st sample. KxK matrix, K number groups. probability creating edge vertices groups j given element (,j). undirected graphs, matrix must symmetric. b1 Numeric vector giving number vertices group first sample. sum vector must match number vertices. p2 matrix giving Bernoulli rates 2nd sample (default: 1st sample). KxK matrix, K number groups. probability creating edge vertices groups j given element (,j). undirected graphs, matrix must symmetric. b2 Numeric vector giving number vertices group second sample (default: 1st sample). sum vector must match number vertices. seed seed random number generator (default: NULL).","code":""},{"path":"https://astamm.github.io/nevada/reference/sample2_sbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-Sample Stochastic Block Model Generator — sample2_sbm","text":"length-2 list containing two samples stored nvd objects.","code":""},{"path":"https://astamm.github.io/nevada/reference/sample2_sbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-Sample Stochastic Block Model Generator — sample2_sbm","text":"","code":"n <- 10 p1 <- matrix(   data = c(0.1, 0.4, 0.1, 0.4,            0.4, 0.4, 0.1, 0.4,            0.1, 0.1, 0.4, 0.4,            0.4, 0.4, 0.4, 0.4),   nrow = 4,   ncol = 4,   byrow = TRUE ) p2 <- matrix(   data = c(0.1, 0.4, 0.4, 0.4,            0.4, 0.4, 0.4, 0.4,            0.4, 0.4, 0.1, 0.1,            0.4, 0.4, 0.1, 0.4),   nrow = 4,   ncol = 4,   byrow = TRUE ) sim <- sample2_sbm(n, 68, p1, c(17, 17, 17, 17), p2, seed = 1234)"},{"path":"https://astamm.github.io/nevada/reference/samplers.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph samplers using edge distributions — samplers","title":"Graph samplers using edge distributions — samplers","text":"collection functions generate random graphs specified edge distribution.","code":""},{"path":"https://astamm.github.io/nevada/reference/samplers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph samplers using edge distributions — samplers","text":"","code":"rpois_network(n, num_vertices, lambda = 1)  rexp_network(n, num_vertices, rate = 1)  rbinom_network(n, num_vertices, size = 1, prob = 0.5)  rsbm(n, num_vertices, pref_matrix, block_sizes)"},{"path":"https://astamm.github.io/nevada/reference/samplers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph samplers using edge distributions — samplers","text":"n Sample size. num_vertices Number vertices. lambda mean parameter Poisson distribution (default: 1). rate rate parameter exponential distribution (default: 1). size number trials binomial distribution (default: 1). prob probability success trial binomial distribution (default: 0.5). pref_matrix matrix giving Bernoulli rates. KxK matrix, K number groups. probability creating edge vertices groups j given element (,j). undirected graphs, matrix must symmetric. See sample_sbm. block_sizes Numeric vector giving number vertices group. sum vector must match number vertices. See sample_sbm.","code":""},{"path":"https://astamm.github.io/nevada/reference/samplers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph samplers using edge distributions — samplers","text":"object class nvd containing sample graphs.","code":""},{"path":"https://astamm.github.io/nevada/reference/samplers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph samplers using edge distributions — samplers","text":"","code":"nvd <- rexp_network(10, 68)"},{"path":"https://astamm.github.io/nevada/reference/statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Statistics for Network Populations — statistics","title":"Test Statistics for Network Populations — statistics","text":"collection functions provide statistics testing equality distribution samples networks.","code":""},{"path":"https://astamm.github.io/nevada/reference/statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistics for Network Populations — statistics","text":"","code":"stat_student_euclidean(d, indices, ...)  stat_welch_euclidean(d, indices, ...)  stat_original_edge_count(d, indices, edge_count_prep, ...)  stat_generalized_edge_count(d, indices, edge_count_prep, ...)  stat_weighted_edge_count(d, indices, edge_count_prep, ...)"},{"path":"https://astamm.github.io/nevada/reference/statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Statistics for Network Populations — statistics","text":"d Either matrix dimension \\((n1+n2)x(n1+n2)\\) containing distances elements two samples put together (distance-based statistics) concatenation lists matrix representations networks samples 1 2 Euclidean t-Statistics. indices vector dimension \\(n1\\) containing indices elements first sample. ... Extra parameters specific statistics. edge_count_prep list preprocessed data information used edge count statistics produced edge_count_global_variables.","code":""},{"path":"https://astamm.github.io/nevada/reference/statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Statistics for Network Populations — statistics","text":"scalar giving value desired test statistic.","code":""},{"path":"https://astamm.github.io/nevada/reference/statistics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Statistics for Network Populations — statistics","text":"details, three main categories statistics: Euclidean t-Statistics: Student stat_student_euclidean version equal variances Welch stat_welch_euclidean version unequal variances, Statistics based similarity graphs: 3 types edge count statistics.","code":""},{"path":"https://astamm.github.io/nevada/reference/statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Statistics for Network Populations — statistics","text":"","code":"n1 <- 30L n2 <- 10L gnp_params <- list(p = 1/3) k_regular_params <- list(k = 8L) x <- nvd(model = \"gnp\", n = n1, model_params = gnp_params) y <- nvd(model = \"k_regular\", n = n2, model_params = k_regular_params) r <- repr_nvd(x, y, representation = \"laplacian\") stat_student_euclidean(r, 1:n1) #> [1] 0.8055932 stat_welch_euclidean(r, 1:n1) #> [1] 0.9542853 d <- dist_nvd(x, y, representation = \"laplacian\", distance = \"frobenius\") ecp <- edge_count_global_variables(d, n1, k = 5L) stat_original_edge_count(d, 1:n1, edge_count_prep = ecp) #> [1] -5.644431 stat_generalized_edge_count(d, 1:n1, edge_count_prep = ecp) #> [1] 37.37713 stat_weighted_edge_count(d, 1:n1, edge_count_prep = ecp) #> [1] -0.3640767"},{"path":"https://astamm.github.io/nevada/reference/subgraphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Full, intra and inter subgraph generators — subgraphs","title":"Full, intra and inter subgraph generators — subgraphs","text":"collection functions extracting full, intra inter subgraphs graph given list vertex subsets.","code":""},{"path":"https://astamm.github.io/nevada/reference/subgraphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full, intra and inter subgraph generators — subgraphs","text":"","code":"subgraph_full(g, vids)  subgraph_intra(g, vids)  subgraph_inter(g, vids)"},{"path":"https://astamm.github.io/nevada/reference/subgraphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full, intra and inter subgraph generators — subgraphs","text":"g igraph object. vids list integer vectors identifying vertex subsets.","code":""},{"path":"https://astamm.github.io/nevada/reference/subgraphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full, intra and inter subgraph generators — subgraphs","text":"igraph object storing subgraph type full, intra inter.","code":""},{"path":"https://astamm.github.io/nevada/reference/subgraphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full, intra and inter subgraph generators — subgraphs","text":"","code":"g <- igraph::make_ring(10) g_full  <- subgraph_full (g, list(1:3, 4:5, 8:10)) g_intra <- subgraph_intra(g, list(1:3, 4:5, 8:10)) g_inter <- subgraph_inter(g, list(1:3, 4:5, 8:10))"},{"path":"https://astamm.github.io/nevada/reference/test2_global.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Two-Sample Test for Network-Valued Data — test2_global","title":"Global Two-Sample Test for Network-Valued Data — test2_global","text":"function carries hypothesis test null hypothesis two populations networks share underlying probabilistic distribution alternative hypothesis two populations come different distributions. test performed non-parametric fashion using permutational framework several statistics can used, together several choices network matrix representations distances networks.","code":""},{"path":"https://astamm.github.io/nevada/reference/test2_global.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Two-Sample Test for Network-Valued Data — test2_global","text":"","code":"test2_global(   x,   y,   representation = c(\"adjacency\", \"laplacian\", \"modularity\", \"transitivity\"),   distance = c(\"frobenius\", \"hamming\", \"spectral\", \"root-euclidean\"),   stats = c(\"flipr:t_ip\", \"flipr:f_ip\"),   B = 1000L,   test = \"exact\",   k = 5L,   seed = NULL,   ... )"},{"path":"https://astamm.github.io/nevada/reference/test2_global.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Two-Sample Test for Network-Valued Data — test2_global","text":"x Either object class nvd listing networks sample 1 distance matrix size \\(n_1 + n_2\\). y Either object class nvd listing networks sample 2 integer value specifying size sample 1 integer vector specifying indices observations belonging sample 1. representation string specifying desired type representation, among: \"adjacency\", \"laplacian\" \"modularity\". Defaults \"adjacency\". distance string specifying chosen distance calculating test statistic, among: \"hamming\", \"frobenius\", \"spectral\" \"root-euclidean\". Defaults \"frobenius\". stats character vector specifying chosen test statistic(s), among: \"original_edge_count\", \"generalized_edge_count\", \"weighted_edge_count\", \"student_euclidean\", \"welch_euclidean\" statistics based inter-point distances available flipr package: \"flipr:student_ip\", \"flipr:fisher_ip\", \"flipr:bg_ip\", \"flipr:energy_ip\", \"flipr:cq_ip\". Defaults c(\"flipr:student_ip\", \"flipr:fisher_ip\"). B number permutation tolerance. number lower 1, intended tolerance. Otherwise, intended number required permutations. Defaults 1000L. test character string specifying formula used compute permutation p-value. Choices \"estimate\", \"upper_bound\" \"exact\". Defaults \"exact\" provides exact tests. k integer specifying density minimum spanning tree used edge count statistics. Defaults 5L. seed integer specifying seed random generator result reproducibility. Defaults NULL. ... Extra arguments passed distance function.","code":""},{"path":"https://astamm.github.io/nevada/reference/test2_global.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Two-Sample Test for Network-Valued Data — test2_global","text":"list three components: value statistic original two samples, p-value resulting permutation test numeric vector storing values permuted statistics.","code":""},{"path":"https://astamm.github.io/nevada/reference/test2_global.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Two-Sample Test for Network-Valued Data — test2_global","text":"","code":"n <- 5L gnp_params <- list(p = 1/3) k_regular_params <- list(k = 8L)  # Two different models for the two populations x <- nvd(model = \"gnp\", n = n, model_params = gnp_params) y <- nvd(model = \"k_regular\", n = n, model_params = k_regular_params) t1 <- test2_global(x, y, representation = \"modularity\") #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. t1$pvalue #> [1] 0.002308242  # Same model for the two populations x <- nvd(model = \"gnp\", n = 10L, model_params = gnp_params) y <- nvd(model = \"gnp\", n = 10L, model_params = gnp_params) t2 <- test2_global(x, y, representation = \"modularity\") #> ! Setting the seed for sampling permutations is mandatory for obtaining a continuous p-value function. Using `seed = 1234`. t2$pvalue #> [1] 0.9960013"},{"path":"https://astamm.github.io/nevada/reference/test2_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Two-Sample Test for Network-Valued Data — test2_local","title":"Local Two-Sample Test for Network-Valued Data — test2_local","text":"Local Two-Sample Test Network-Valued Data","code":""},{"path":"https://astamm.github.io/nevada/reference/test2_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Two-Sample Test for Network-Valued Data — test2_local","text":"","code":"test2_local(   x,   y,   partition,   representation = \"adjacency\",   distance = \"frobenius\",   stats = c(\"flipr:t_ip\", \"flipr:f_ip\"),   B = 1000L,   alpha = 0.05,   test = \"exact\",   k = 5L,   seed = NULL,   verbose = FALSE )"},{"path":"https://astamm.github.io/nevada/reference/test2_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Two-Sample Test for Network-Valued Data — test2_local","text":"x Either object class nvd listing networks sample 1 distance matrix size \\(n_1 + n_2\\). y Either object class nvd listing networks sample 2 integer value specifying size sample 1 integer vector specifying indices observations belonging sample 1. partition Either list integer vector specifying vertex memberships partition elements. representation string specifying desired type representation, among: \"adjacency\", \"laplacian\" \"modularity\". Defaults \"adjacency\". distance string specifying chosen distance calculating test statistic, among: \"hamming\", \"frobenius\", \"spectral\" \"root-euclidean\". Defaults \"frobenius\". stats character vector specifying chosen test statistic(s), among: \"original_edge_count\", \"generalized_edge_count\", \"weighted_edge_count\", \"student_euclidean\", \"welch_euclidean\" statistics based inter-point distances available flipr package: \"flipr:student_ip\", \"flipr:fisher_ip\", \"flipr:bg_ip\", \"flipr:energy_ip\", \"flipr:cq_ip\". Defaults c(\"flipr:student_ip\", \"flipr:fisher_ip\"). B number permutation tolerance. number lower 1, intended tolerance. Otherwise, intended number required permutations. Defaults 1000L. alpha Significance level hypothesis testing. set 1, function outputs properly adjusted p-values. lower 1, p-values lower alpha properly adjusted. Defaults 0.05. test character string specifying formula used compute permutation p-value. Choices \"estimate\", \"upper_bound\" \"exact\". Defaults \"exact\" provides exact tests. k integer specifying density minimum spanning tree used edge count statistics. Defaults 5L. seed integer specifying seed random generator result reproducibility. Defaults NULL. verbose Boolean specifying whether information intermediate tests printed process (default: FALSE).","code":""},{"path":"https://astamm.github.io/nevada/reference/test2_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Two-Sample Test for Network-Valued Data — test2_local","text":"length-2 list reporting adjusted p-values element partition intra- inter-tests.","code":""},{"path":"https://astamm.github.io/nevada/reference/test2_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Two-Sample Test for Network-Valued Data — test2_local","text":"","code":"n <- 5L p1 <- matrix(   data = c(0.1, 0.4, 0.1, 0.4,            0.4, 0.4, 0.1, 0.4,            0.1, 0.1, 0.4, 0.4,            0.4, 0.4, 0.4, 0.4),   nrow = 4,   ncol = 4,   byrow = TRUE ) p2 <- matrix(   data = c(0.1, 0.4, 0.4, 0.4,            0.4, 0.4, 0.4, 0.4,            0.4, 0.4, 0.1, 0.1,            0.4, 0.4, 0.1, 0.4),   nrow = 4,   ncol = 4,   byrow = TRUE ) sim <- sample2_sbm(n, 68, p1, c(17, 17, 17, 17), p2, seed = 1234) m <- as.integer(c(rep(1, 17), rep(2, 17), rep(3, 17), rep(4, 17))) test2_local(sim$x, sim$y, m,             seed = 1234,             alpha = 0.05,             B = 19) #> $intra #> # A tibble: 4 × 3 #>   E     pvalue truncated #>   <chr>  <dbl> <lgl>     #> 1 P1    0.548  TRUE      #> 2 P2    0.548  TRUE      #> 3 P3    0.0480 FALSE     #> 4 P4    0.548  TRUE      #>  #> $inter #> # A tibble: 6 × 4 #>   E1    E2    pvalue truncated #>   <chr> <chr>  <dbl> <lgl>     #> 1 P1    P2    0.548  TRUE      #> 2 P1    P3    0.0480 FALSE     #> 3 P1    P4    0.548  TRUE      #> 4 P2    P3    0.0480 FALSE     #> 5 P2    P4    0.548  TRUE      #> 6 P3    P4    0.0480 FALSE     #>"},{"path":"https://astamm.github.io/nevada/reference/var2_nvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Fréchet Variance of Network-Valued Data from Inter-Point Distances — var2_nvd","title":"Fréchet Variance of Network-Valued Data from Inter-Point Distances — var2_nvd","text":"function computes Fréchet variance using exclusively inter-point distances. , can accommodate pair representation distance.","code":""},{"path":"https://astamm.github.io/nevada/reference/var2_nvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fréchet Variance of Network-Valued Data from Inter-Point Distances — var2_nvd","text":"","code":"var2_nvd(x, representation = \"adjacency\", distance = \"frobenius\")"},{"path":"https://astamm.github.io/nevada/reference/var2_nvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fréchet Variance of Network-Valued Data from Inter-Point Distances — var2_nvd","text":"x nvd object listing sample networks. representation string specifying graph representation used. Choices adjacency, laplacian, modularity, graphon. Default adjacency. distance string specifying distance used. Possible choices : hamming, frobenius, spectral root-euclidean. Default frobenius.","code":""},{"path":"https://astamm.github.io/nevada/reference/var2_nvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fréchet Variance of Network-Valued Data from Inter-Point Distances — var2_nvd","text":"positive scalar value evaluating variance based inter-point distances.","code":""},{"path":"https://astamm.github.io/nevada/reference/var2_nvd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fréchet Variance of Network-Valued Data from Inter-Point Distances — var2_nvd","text":"","code":"gnp_params <- list(p = 1/3) x <- nvd(model = \"gnp\", n = 10L, model_params = gnp_params) var2_nvd(x = x, representation = \"graphon\", distance = \"frobenius\") #> [1] 29.14793"},{"path":"https://astamm.github.io/nevada/reference/var_nvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Fréchet Variance of Network-Valued Data Around a Given Network — var_nvd","title":"Fréchet Variance of Network-Valued Data Around a Given Network — var_nvd","text":"function computes Fréchet variance around specified network observed sample network-valued random variables according specified distance. cases, user willing compute sample variance, case Fréchet variance evaluated w.r.t. sample Fréchet mean. case, important user indicates distance one (s)used separately compute sample Fréchet mean. function can also used function minimized order find Fréchet mean given distance.","code":""},{"path":"https://astamm.github.io/nevada/reference/var_nvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fréchet Variance of Network-Valued Data Around a Given Network — var_nvd","text":"","code":"var_nvd(x, x0, weights = rep(1, length(x)), distance = \"frobenius\")"},{"path":"https://astamm.github.io/nevada/reference/var_nvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fréchet Variance of Network-Valued Data Around a Given Network — var_nvd","text":"x nvd object listing sample networks. x0 network already matrix representation around calculate variance (usually Fréchet mean necessarily). Note chosen matrix representation extracted parameter. weights numeric vector specifying weights observation (default: equally weighted). distance string specifying distance used. Possible choices : hamming, frobenius, spectral root-euclidean. Default frobenius. Fréchet mean used x0 parameter, distance match one used compute mean. currently checked.","code":""},{"path":"https://astamm.github.io/nevada/reference/var_nvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fréchet Variance of Network-Valued Data Around a Given Network — var_nvd","text":"positive scalar value evaluating amount variability sample around specified network.","code":""},{"path":"https://astamm.github.io/nevada/reference/var_nvd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fréchet Variance of Network-Valued Data Around a Given Network — var_nvd","text":"","code":"gnp_params <- list(p = 1/3) x <- nvd(model = \"gnp\", n = 10L, model_params = gnp_params) m <- mean(x) var_nvd(x = x, x0 = m, distance = \"frobenius\") #> [1] 120.3"},{"path":"https://astamm.github.io/nevada/news/index.html","id":"nevada-020","dir":"Changelog","previous_headings":"","what":"nevada 0.2.0","title":"nevada 0.2.0","text":"CRAN release: 2023-09-03 Improved nvd constructor. Updated GHA scripts. Added tSNE UMAP viz. Added support graphs different sizes /unlabeled graphs. Added support distance matrices test functions. Added support parallelization via future framework furrr.","code":""},{"path":"https://astamm.github.io/nevada/news/index.html","id":"nevada-010","dir":"Changelog","previous_headings":"","what":"nevada 0.1.0","title":"nevada 0.1.0","text":"CRAN release: 2021-09-25 Initial release. Added NEWS.md file track changes package.","code":""}]
