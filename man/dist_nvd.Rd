% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distances.R
\name{dist_nvd}
\alias{dist_nvd}
\title{Pairwise Distance Matrix Between Two Samples of Networks}
\usage{
dist_nvd(
  x,
  y = NULL,
  representation = "adjacency",
  distance = "frobenius",
  start = "barycenter",
  iteration = 20L,
  parallel = FALSE
)
}
\arguments{
\item{x}{A \code{\link[base]{list}} of \code{\link[igraph]{igraph}} objects
or matrix representations of underlying networks from a given first
population.}

\item{y}{A \code{\link[base]{list}} of \code{\link[igraph]{igraph}} objects
or matrix representations of underlying networks from a given second
population.}

\item{representation}{A string specifying the desired type of representation,
among: \code{"adjacency"}, \code{"laplacian"}, \code{"modularity"} or
\code{"graphon"}. Default is \code{"laplacian"}.}

\item{distance}{A string specifying the chosen distance for calculating the
test statistic, among: \code{"hamming"}, \code{"frobenius"},
\code{"spectral"}, \code{"root-euclidean"} and \code{"match-frobenius"}. Default is
\code{"frobenius"}.}

\item{start}{A string specifying the initialization of the permutation matrix estimate, among: \code{"barycenter"} and \code{"identity"}. Default is
\code{"barycenter"}. It is required for \code{distance == "match-frobenius"}.}

\item{iteration}{The number of iterations for the Frank-Wolfe algorithm. Default to 20L. It is required for \code{distance == "match-frobenius"}.}

\item{parallel}{A boolean specifying whether the function should be performed in parallel (only for \code{"match-frobenius"} distance). Defaults to \code{FALSE}.}
}
\value{
A matrix of dimension \eqn{(n1+n2) \times (n1+n2)} containing the
distances between all the elements of the two samples put together.
}
\description{
This function computes the matrix of pairwise distances between all the
elements of the two samples put together. The cardinality of the fist sample
is denoted by \eqn{n1} and that of the second one is denoted by \eqn{n2}.
}
\examples{
gnp_params <- list(p = 1/3)
k_regular_params <- list(k = 8L)
x <- nvd(model = "gnp", n = 10L, model_params = gnp_params)
y <- nvd(model = "k_regular", n = 10L, model_params = k_regular_params)
dist_nvd(x, y, "adjacency", "spectral")
}
